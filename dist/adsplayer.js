!function(U,Q){"object"==typeof exports&&"object"==typeof module?module.exports=Q():"function"==typeof define&&define.amd?define("adsplayer",[],Q):"object"==typeof exports?exports.adsplayer=Q():U.adsplayer=Q()}(window,(function(){return function(U){var Q={};function I(B){if(Q[B])return Q[B].exports;var F=Q[B]={i:B,l:!1,exports:{}};return U[B].call(F.exports,F,F.exports,I),F.l=!0,F.exports}return I.m=U,I.c=Q,I.d=function(U,Q,B){I.o(U,Q)||Object.defineProperty(U,Q,{enumerable:!0,get:B})},I.r=function(U){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(U,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(U,"__esModule",{value:!0})},I.t=function(U,Q){if(1&Q&&(U=I(U)),8&Q)return U;if(4&Q&&"object"==typeof U&&U&&U.__esModule)return U;var B=Object.create(null);if(I.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:U}),2&Q&&"string"!=typeof U)for(var F in U)I.d(B,F,function(Q){return U[Q]}.bind(null,F));return B},I.n=function(U){var Q=U&&U.__esModule?function(){return U.default}:function(){return U};return I.d(Q,"a",Q),Q},I.o=function(U,Q){return Object.prototype.hasOwnProperty.call(U,Q)},I.p="",I(I.s=8)}([function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nDate.prototype.HHMMSSmmm = function () {\r\n    var h = this.getHours().toString(), m = this.getMinutes().toString(), s = this.getSeconds().toString(), ms = this.getMilliseconds().toString(), HH = h[1] ? h : '0' + h[0], MM = m[1] ? m : '0' + m[0], SS = s[1] ? s : '0' + s[0], mmm = ms[2] ? ms : '0' + (ms[1] ? ms : '0' + ms[0]);\r\n    return HH + ':' + MM + ':' + SS + '.' + mmm;\r\n};\r\nDate.prototype.MMSSmmm = function () {\r\n    var m = this.getMinutes().toString(), s = this.getSeconds().toString(), ms = this.getMilliseconds().toString(), MM = m[1] ? m : '0' + m[0], SS = s[1] ? s : '0' + s[0], mmm = ms[2] ? ms : '0' + (ms[1] ? ms : '0' + ms[0]);\r\n    return MM + ':' + SS + '.' + mmm;\r\n};\r\nvar LOG_LEVEL;\r\n(function (LOG_LEVEL) {\r\n    LOG_LEVEL[LOG_LEVEL[\"NONE\"] = 0] = \"NONE\";\r\n    LOG_LEVEL[LOG_LEVEL[\"ERROR\"] = 1] = \"ERROR\";\r\n    LOG_LEVEL[LOG_LEVEL[\"WARN\"] = 2] = \"WARN\";\r\n    LOG_LEVEL[LOG_LEVEL[\"INFO\"] = 3] = \"INFO\";\r\n    LOG_LEVEL[LOG_LEVEL[\"DEBUG\"] = 4] = \"DEBUG\";\r\n    LOG_LEVEL[LOG_LEVEL[\"ALL\"] = 4] = \"ALL\";\r\n})(LOG_LEVEL = exports.LOG_LEVEL || (exports.LOG_LEVEL = {}));\r\nvar Logger = /** @class */ (function () {\r\n    function Logger() {\r\n        this.level = LOG_LEVEL.ALL;\r\n        this.showTimestamp = true;\r\n        this.showElapsedTime = false;\r\n        this.startTime = new Date();\r\n        this.logger = console;\r\n    }\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    Logger.getInstance = function () {\r\n        if (this.instance === null) {\r\n            this.instance = new Logger();\r\n        }\r\n        return this.instance;\r\n    };\r\n    Logger.prototype.getLevel = function () {\r\n        return this.level;\r\n    };\r\n    Logger.prototype.setLevel = function (value) {\r\n        this.level = value;\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this.log(LOG_LEVEL.ERROR, args);\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this.log(LOG_LEVEL.WARN, args);\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this.log(LOG_LEVEL.INFO, args);\r\n    };\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this.log(LOG_LEVEL.DEBUG, args);\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    Logger.prototype.getStringLevel = function (level) {\r\n        switch (level) {\r\n            case LOG_LEVEL.NONE:\r\n                return '';\r\n            case LOG_LEVEL.ERROR:\r\n                return 'ERROR';\r\n            case LOG_LEVEL.WARN:\r\n                return 'WARN';\r\n            case LOG_LEVEL.INFO:\r\n                return 'INFO';\r\n            case LOG_LEVEL.DEBUG:\r\n            case LOG_LEVEL.ALL:\r\n                return 'DEBUG';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n    Logger.prototype.prepareLog = function (logLevel) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var message = '', logTime = new Date();\r\n        if (this.showTimestamp) {\r\n            message += '[' + logTime.HHMMSSmmm() + ']';\r\n        }\r\n        if (this.logger && this.logger.showLevel) {\r\n            message += '[' + this.getStringLevel(logLevel) + ']';\r\n        }\r\n        if (this.showElapsedTime) {\r\n            message += '[' + new Date(logTime.getTime() - this.startTime.getTime()).MMSSmmm() + ']';\r\n        }\r\n        message += '[AdsPlayer] ';\r\n        Array.apply(null, args).forEach(function (item) {\r\n            message += item + ' ';\r\n        });\r\n        return message;\r\n    };\r\n    Logger.prototype.log = function (logLevel) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (logLevel > this.getLevel()) {\r\n            return;\r\n        }\r\n        var message = this.prepareLog(logLevel, args);\r\n        switch (logLevel) {\r\n            case LOG_LEVEL.ERROR:\r\n                this.logger.error(message);\r\n                break;\r\n            case LOG_LEVEL.WARN:\r\n                this.logger.warn(message);\r\n                break;\r\n            case LOG_LEVEL.INFO:\r\n                this.logger.info(message);\r\n                break;\r\n            case LOG_LEVEL.DEBUG:\r\n                this.logger.debug(message);\r\n                break;\r\n        }\r\n    };\r\n    // #region MEMBERS\r\n    // --------------------------------------------------\r\n    Logger.instance = null;\r\n    return Logger;\r\n}());\r\nexports.Logger = Logger;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvbGliL0xvZ2dlci50cz9iYTVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkJFOztBQVlGLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHO0lBQ3ZCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDOUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDaEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDaEMsRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDdEMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMxQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzFCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhELE9BQU8sRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHO0lBQ3JCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDaEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDaEMsRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDdEMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMxQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzFCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4RCxPQUFPLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBR0YsSUFBWSxTQU9YO0FBUEQsV0FBWSxTQUFTO0lBQ2pCLHlDQUFRO0lBQ1IsMkNBQVM7SUFDVCx5Q0FBUTtJQUNSLHlDQUFRO0lBQ1IsMkNBQVM7SUFDVCx1Q0FBTztBQUNYLENBQUMsRUFQVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQU9wQjtBQUVEO0lBMEJJO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBbkJELHFCQUFxQjtJQUNyQixxREFBcUQ7SUFFckQsMkJBQTJCO0lBQzNCLHFEQUFxRDtJQUU5QyxrQkFBVyxHQUFsQjtRQUNJLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFVRCx5QkFBUSxHQUFSO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCx5QkFBUSxHQUFSLFVBQVUsS0FBZ0I7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELHNCQUFLLEdBQUw7UUFBTSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHFCQUFJLEdBQUo7UUFBTSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHFCQUFJLEdBQUo7UUFBTSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHNCQUFLLEdBQUw7UUFBTyxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELDhCQUE4QjtJQUM5QixxREFBcUQ7SUFHckQsNEJBQTRCO0lBQzVCLHFEQUFxRDtJQUVyRCwrQkFBYyxHQUFkLFVBQWUsS0FBSztRQUNoQixRQUFRLEtBQUssRUFBRTtZQUNYLEtBQUssU0FBUyxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLENBQUM7WUFDZCxLQUFLLFNBQVMsQ0FBQyxLQUFLO2dCQUNoQixPQUFPLE9BQU8sQ0FBQztZQUNuQixLQUFLLFNBQVMsQ0FBQyxJQUFJO2dCQUNmLE9BQU8sTUFBTSxDQUFDO1lBQ2xCLEtBQUssU0FBUyxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxNQUFNLENBQUM7WUFDbEIsS0FBSyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3JCLEtBQUssU0FBUyxDQUFDLEdBQUc7Z0JBQ2QsT0FBTyxPQUFPLENBQUM7WUFDbkI7Z0JBQ0ksT0FBTyxFQUFFLENBQUM7U0FDakI7SUFDTCxDQUFDO0lBRUQsMkJBQVUsR0FBVixVQUFXLFFBQVE7UUFBRSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLDZCQUFjOztRQUMvQixJQUFJLE9BQU8sR0FBRyxFQUFFLEVBQ1osT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFekIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEdBQUcsQ0FBQztTQUM5QztRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUN0QyxPQUFPLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ3hEO1FBRUQsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUM7U0FDM0Y7UUFFRCxPQUFPLElBQUksY0FBYyxDQUFDO1FBRTFCLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFTLElBQUk7WUFDekMsT0FBTyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQsb0JBQUcsR0FBSCxVQUFLLFFBQW1CO1FBQUUsY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCw2QkFBYzs7UUFDcEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQzVCLE9BQU87U0FDVjtRQUNELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlDLFFBQVEsUUFBUSxFQUFFO1lBQ2QsS0FBSyxTQUFTLENBQUMsS0FBSztnQkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzNCLE1BQU07WUFDVixLQUFLLFNBQVMsQ0FBQyxJQUFJO2dCQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMxQixNQUFNO1lBQ1YsS0FBSyxTQUFTLENBQUMsSUFBSTtnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDMUIsTUFBTTtZQUNWLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMzQixNQUFNO1NBQ2I7SUFDTCxDQUFDO0lBN0hELGtCQUFrQjtJQUNsQixxREFBcUQ7SUFFdEMsZUFBUSxHQUFXLElBQUksQ0FBQztJQThIM0MsYUFBQztDQUFBO0FBbklZLHdCQUFNIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qIFRoZSBjb3B5cmlnaHQgaW4gdGhpcyBzb2Z0d2FyZSBtb2R1bGUgaXMgYmVpbmcgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIEJTRCBMaWNlbnNlLCBpbmNsdWRlZFxyXG4qIGJlbG93LiBUaGlzIHNvZnR3YXJlIG1vZHVsZSBtYXkgYmUgc3ViamVjdCB0byBvdGhlciB0aGlyZCBwYXJ0eSBhbmQvb3IgY29udHJpYnV0b3IgcmlnaHRzLFxyXG4qIGluY2x1ZGluZyBwYXRlbnQgcmlnaHRzLCBhbmQgbm8gc3VjaCByaWdodHMgYXJlIGdyYW50ZWQgdW5kZXIgdGhpcyBsaWNlbnNlLlxyXG4qXHJcbiogQ29weXJpZ2h0IChjKSAyMDE2LCBPcmFuZ2VcclxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4qXHJcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZFxyXG4qIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XHJcbiogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zXHJcbiogICBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4qIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuKiAgIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXHJcbiogICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbiogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIE9yYW5nZSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlXHJcbiogICBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSBtb2R1bGUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcbipcclxuKlxyXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMg4oCcQVMgSVPigJ0gQU5EIEFOWSBFWFBSRVNTIE9SXHJcbiogSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXHJcbiogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9cclxuKiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXHJcbiogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxyXG4qIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLFxyXG4qIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTllcclxuKiBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cclxuKi9cclxuXHJcbi8qKlxyXG4qIERhdGUgcHJvcm90eXBlIGV4dGVuc2lvblxyXG4qL1xyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgRGF0ZSB7XHJcbiAgICAgICAgSEhNTVNTbW1tKCk6IHN0cmluZztcclxuICAgICAgICBNTVNTbW1tKCk6IHN0cmluZztcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbkRhdGUucHJvdG90eXBlLkhITU1TU21tbSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgbGV0IGggPSB0aGlzLmdldEhvdXJzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBtID0gdGhpcy5nZXRNaW51dGVzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBzID0gdGhpcy5nZXRTZWNvbmRzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBtcyA9IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBISCA9IGhbMV0gPyBoIDogJzAnICsgaFswXSxcclxuICAgICAgICBNTSA9IG1bMV0gPyBtIDogJzAnICsgbVswXSxcclxuICAgICAgICBTUyA9IHNbMV0gPyBzIDogJzAnICsgc1swXSxcclxuICAgICAgICBtbW0gPSBtc1syXSA/IG1zIDogJzAnICsgKG1zWzFdID8gbXMgOiAnMCcgKyBtc1swXSk7XHJcblxyXG4gICAgcmV0dXJuIEhIICsgJzonICsgTU0gKyAnOicgKyBTUyArICcuJyArIG1tbTtcclxufTtcclxuXHJcbkRhdGUucHJvdG90eXBlLk1NU1NtbW0gPSBmdW5jdGlvbigpIHtcclxuICAgIGxldCBtID0gdGhpcy5nZXRNaW51dGVzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBzID0gdGhpcy5nZXRTZWNvbmRzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBtcyA9IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKSxcclxuICAgICAgICBNTSA9IG1bMV0gPyBtIDogJzAnICsgbVswXSxcclxuICAgICAgICBTUyA9IHNbMV0gPyBzIDogJzAnICsgc1swXSxcclxuICAgICAgICBtbW0gPSBtc1syXSA/IG1zIDogJzAnICsgKG1zWzFdID8gbXMgOiAnMCcgKyBtc1swXSk7XHJcblxyXG4gICAgcmV0dXJuIE1NICsgJzonICsgU1MgKyAnLicgKyBtbW07XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGVudW0gTE9HX0xFVkVMIHtcclxuICAgIE5PTkUgPSAwLFxyXG4gICAgRVJST1IgPSAxLFxyXG4gICAgV0FSTiA9IDIsXHJcbiAgICBJTkZPID0gMyxcclxuICAgIERFQlVHID0gNCxcclxuICAgIEFMTCA9IDQsXHJcbn0gIFxyXG5cclxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XHJcblxyXG4gICAgLy8gI3JlZ2lvbiBNRU1CRVJTXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBMb2dnZXIgPSBudWxsO1xyXG5cclxuICAgIGxldmVsOiBMT0dfTEVWRUw7XHJcbiAgICBzaG93VGltZXN0YW1wOiBib29sZWFuO1xyXG4gICAgc2hvd0VsYXBzZWRUaW1lOiBib29sZWFuO1xyXG4gICAgc3RhcnRUaW1lOiBEYXRlO1xyXG4gICAgbG9nZ2VyOiBhbnk7XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvbiBNRU1CRVJTXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8vICNyZWdpb24gUFVCTElDIEZVTkNUSU9OU1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBMb2dnZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5sZXZlbCA9IExPR19MRVZFTC5BTEw7XHJcbiAgICAgICAgdGhpcy5zaG93VGltZXN0YW1wID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3dFbGFwc2VkVGltZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGNvbnNvbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGV2ZWwgKCk6IExPR19MRVZFTCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TGV2ZWwgKHZhbHVlOiBMT0dfTEVWRUwpIHtcclxuICAgICAgICB0aGlzLmxldmVsID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3IoLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICB0aGlzLmxvZyhMT0dfTEVWRUwuRVJST1IsIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHdhcm4gKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5sb2coTE9HX0xFVkVMLldBUk4sIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGluZm8gKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5sb2coTE9HX0xFVkVMLklORk8sIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYnVnICguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIHRoaXMubG9nKExPR19MRVZFTC5ERUJVRywgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvbiBQVUJMSUMgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHJcbiAgICAvLyAjcmVnaW9uIFBSSVZBVEUgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIGdldFN0cmluZ0xldmVsKGxldmVsKSB7XHJcbiAgICAgICAgc3dpdGNoIChsZXZlbCkge1xyXG4gICAgICAgICAgICBjYXNlIExPR19MRVZFTC5OT05FOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICBjYXNlIExPR19MRVZFTC5FUlJPUjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnRVJST1InO1xyXG4gICAgICAgICAgICBjYXNlIExPR19MRVZFTC5XQVJOOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdXQVJOJztcclxuICAgICAgICAgICAgY2FzZSBMT0dfTEVWRUwuSU5GTzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnSU5GTyc7XHJcbiAgICAgICAgICAgIGNhc2UgTE9HX0xFVkVMLkRFQlVHOlxyXG4gICAgICAgICAgICBjYXNlIExPR19MRVZFTC5BTEw6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0RFQlVHJztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZUxvZyhsb2dMZXZlbCwgLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICBsZXQgbWVzc2FnZSA9ICcnLFxyXG4gICAgICAgICAgICBsb2dUaW1lID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd1RpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlICs9ICdbJyArIGxvZ1RpbWUuSEhNTVNTbW1tKCkgKyAnXSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5sb2dnZXIgJiYgdGhpcy5sb2dnZXIuc2hvd0xldmVsKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gJ1snICsgdGhpcy5nZXRTdHJpbmdMZXZlbChsb2dMZXZlbCkgKyAnXSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zaG93RWxhcHNlZFRpbWUpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSArPSAnWycgKyBuZXcgRGF0ZShsb2dUaW1lLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lLmdldFRpbWUoKSkuTU1TU21tbSgpICsgJ10nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWVzc2FnZSArPSAnW0Fkc1BsYXllcl0gJztcclxuXHJcbiAgICAgICAgQXJyYXkuYXBwbHkobnVsbCwgYXJncykuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gaXRlbSArICcgJztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nIChsb2dMZXZlbDogTE9HX0xFVkVMLCAuLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGlmIChsb2dMZXZlbCA+IHRoaXMuZ2V0TGV2ZWwoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtZXNzYWdlID0gdGhpcy5wcmVwYXJlTG9nKGxvZ0xldmVsLCBhcmdzKTtcclxuICAgICAgICBzd2l0Y2ggKGxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgTE9HX0xFVkVMLkVSUk9SOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMT0dfTEVWRUwuV0FSTjpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMT0dfTEVWRUwuSU5GTzpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMT0dfTEVWRUwuREVCVUc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAjZW5kcmVnaW9uIFBSSVZBVEUgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar EventTypes;\r\n(function (EventTypes) {\r\n    /**\r\n     * The \'start\' event is fired when the playback of ad(s) is starting.\r\n     * When the \'start\' event is fired, the application shall hide the main player component and\r\n     * display the ads player container in which the ad media player component(s) will be created\r\n     * and displayed.\r\n     * <br/>Event data properties:\r\n     * @event START\r\n     * @property <b>id</b>: string - the ad id\r\n     * @property <b>duration</b>: number - the ad duration (duration of all clips contained in the ad break)\r\n     * @property <b>currentTime</b>: number - the main video element current time\r\n     * @property <b>ended</b>: boolean - the main video element ended state (true in case of end-roll ad)\r\n     */\r\n    EventTypes["START"] = "start";\r\n    /**\r\n     * The \'end\' event is fired when the playback of ad(s) has ended.\r\n     * When the \'end\' event is fired, the application shall display the main player component and\r\n     * hide the ads player container.\r\n     * @event END\r\n     */\r\n    EventTypes["END"] = "end";\r\n    /**\r\n     * The \'addElement\' event is fired when a DOM element for playing an ad has been created\r\n     * and appended in the ads player container.\r\n     * The element can be either a &lt;video&gt; or an &lt;img&gt; element.\r\n     * <br/>Event data properties:\r\n     * @event ADD_ELEMENT\r\n     * @property <b>element</b>: HTMLElement - the created element\r\n     * @property <b>type</b>: string - the type of the element, \'video\' for &lt;video&gt; or \'image\' for &lt;img&gt;\r\n     */\r\n    EventTypes["ADD_ELEMENT"] = "addElement";\r\n    /**\r\n     * The \'removeElement\' event is fired when the DOM element for playing an ad is being removed\r\n     * from the ads player container and deleted.\r\n     * <br/>Event data properties:\r\n     * @event REMOVE_ELEMENT\r\n     * @property <b>element</b>: HTMLElement - the removed element\r\n     * @property <b>type</b>: string - the type of the element, \'video\' for &lt;video&gt; or \'image\' for &lt;img&gt;\r\n     */\r\n    EventTypes["REMOVE_ELEMENT"] = "removeElement";\r\n    /**\r\n     * The \'creativeStart\' event is fired when a creative starts to play\r\n     * <br/>Event data properties:\r\n     * @event CREATIVE_START\r\n     * @property <b>mediaType</b>: string - the creative media type (\'audio\' or \'video\')\r\n     * @property <b>duration</b>: number - the media duration\r\n     * @property <b>clickThroughUrl</b>: string - the click through url\r\n     */\r\n    EventTypes["CREATIVE_START"] = "creativeStart";\r\n    /**\r\n     * The \'creativeEnd\' event is fired when a creative ended\r\n     * <br/>Event data properties:\r\n     * @event CREATIVE_END\r\n     */\r\n    EventTypes["CREATIVE_END"] = "creativeEnd";\r\n    /**\r\n     * The \'play\' event is fired when the playback of media ad is starting.\r\n     * @event PLAY\r\n     */\r\n    EventTypes["PLAY"] = "play";\r\n    /**\r\n     * The \'pause\' event is fired when the playback of an ad is paused.\r\n     * @event PAUSE\r\n     */\r\n    EventTypes["PAUSE"] = "pause";\r\n    /**\r\n     * The \'timeUpdate\' event is fired when the current ad playback time has been updated.\r\n     * @event TIMEUPDATE\r\n     * @property <b>currentTime</b>: number - the current time\r\n     */\r\n    EventTypes["TIMEUPDATE"] = "timeUpdate";\r\n    /**\r\n     * The \'click\' event is fired when a click has been performed on the ad component.\r\n     * When the \'click\' event is fired, the application shall open the web page with the provided URI.\r\n     * <br/>Event data properties:\r\n     * @event CLICK\r\n     * @property <b>uri</b>: string - the web page uri\r\n     */\r\n    EventTypes["CLICK"] = "click";\r\n    /**\r\n     * The error event is fired when an error occurs.\r\n     * <br/>Event data properties:\r\n     * @event ERROR\r\n     * @property <b>code</b>: number - the error code\r\n     * @property <b>message</b>: string - the error message\r\n     * @property <b>data</b>: object -  error additionnal data\r\n     */\r\n    EventTypes["ERROR"] = "error";\r\n})(EventTypes = exports.EventTypes || (exports.EventTypes = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Utils = /** @class */ (function () {\r\n    function Utils() {\r\n    }\r\n    Utils.isAbsoluteURI = function (uri) {\r\n        return ((uri.toLowerCase().indexOf('http://') >= 0) || (uri.toLowerCase().indexOf('https://') >= 0));\r\n    };\r\n    Utils.parseTime = function (str) {\r\n        var timeParts, SECONDS_IN_HOUR = 60 * 60, SECONDS_IN_MIN = 60;\r\n        if (!str) {\r\n            return -1;\r\n        }\r\n        timeParts = str.split(':');\r\n        // Check time format, must be HH:MM:SS(.mmm)\r\n        if (timeParts.length !== 3) {\r\n            return -1;\r\n        }\r\n        return (parseInt(timeParts[0]) * SECONDS_IN_HOUR) +\r\n            (parseInt(timeParts[1]) * SECONDS_IN_MIN) +\r\n            (parseFloat(timeParts[2]));\r\n    };\r\n    return Utils;\r\n}());\r\nexports.Utils = Utils;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvbGliL3V0aWxzL3V0aWxzLnRzPzczZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEyQkU7O0FBRUY7SUFBQTtJQXlCQSxDQUFDO0lBeEJVLG1CQUFhLEdBQUcsVUFBVSxHQUFXO1FBQ3hDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekcsQ0FBQztJQUVNLGVBQVMsR0FBRyxVQUFVLEdBQVc7UUFDcEMsSUFBSSxTQUFTLEVBQ1QsZUFBZSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQ3pCLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDYjtRQUVELFNBQVMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNCLDRDQUE0QztRQUM1QyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDYjtRQUVELE9BQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsZUFBZSxDQUFDO1lBQzFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQztZQUN6QyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDTCxZQUFDO0NBQUE7QUF6Qlksc0JBQUsiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiogVGhlIGNvcHlyaWdodCBpbiB0aGlzIHNvZnR3YXJlIG1vZHVsZSBpcyBiZWluZyBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UsIGluY2x1ZGVkXHJcbiogYmVsb3cuIFRoaXMgc29mdHdhcmUgbW9kdWxlIG1heSBiZSBzdWJqZWN0IHRvIG90aGVyIHRoaXJkIHBhcnR5IGFuZC9vciBjb250cmlidXRvciByaWdodHMsXHJcbiogaW5jbHVkaW5nIHBhdGVudCByaWdodHMsIGFuZCBubyBzdWNoIHJpZ2h0cyBhcmUgZ3JhbnRlZCB1bmRlciB0aGlzIGxpY2Vuc2UuXHJcbipcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTYsIE9yYW5nZVxyXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbipcclxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkXHJcbiogcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnNcclxuKiAgIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbiogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxyXG4qICAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcclxuKiAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgT3JhbmdlIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcclxuKiAgIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIG1vZHVsZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuKlxyXG4qXHJcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyDigJxBUyBJU+KAnSBBTkQgQU5ZIEVYUFJFU1MgT1JcclxuKiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcclxuKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1xyXG4qIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcclxuKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXHJcbiogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXHJcbiogV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWVxyXG4qIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4qL1xyXG5cclxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcclxuICAgIHN0YXRpYyBpc0Fic29sdXRlVVJJID0gZnVuY3Rpb24gKHVyaTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICgodXJpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignaHR0cDovLycpID49IDApIHx8ICh1cmkudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdodHRwczovLycpID49IDApKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcGFyc2VUaW1lID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgdGltZVBhcnRzLFxyXG4gICAgICAgICAgICBTRUNPTkRTX0lOX0hPVVIgPSA2MCAqIDYwLFxyXG4gICAgICAgICAgICBTRUNPTkRTX0lOX01JTiA9IDYwO1xyXG5cclxuICAgICAgICBpZiAoIXN0cikge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aW1lUGFydHMgPSBzdHIuc3BsaXQoJzonKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgdGltZSBmb3JtYXQsIG11c3QgYmUgSEg6TU06U1MoLm1tbSlcclxuICAgICAgICBpZiAodGltZVBhcnRzLmxlbmd0aCAhPT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gIChwYXJzZUludCh0aW1lUGFydHNbMF0pICogU0VDT05EU19JTl9IT1VSKSArXHJcbiAgICAgICAgICAgICAgICAocGFyc2VJbnQodGltZVBhcnRzWzFdKSAqIFNFQ09ORFNfSU5fTUlOKSArXHJcbiAgICAgICAgICAgICAgICAocGFyc2VGbG9hdCh0aW1lUGFydHNbMl0pKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n/**\r\n* Event bus utility class for events listening and notifying.\r\n*/\r\nvar Logger_1 = __webpack_require__(0);\r\nvar AdEvents;\r\n(function (AdEvents) {\r\n    AdEvents["TRIGGER_START"] = "triggerStart";\r\n    AdEvents["TRIGGER_END"] = "triggerEnd";\r\n    AdEvents["AD_START"] = "adStart";\r\n    AdEvents["AD_END"] = "adEnd";\r\n})(AdEvents = exports.AdEvents || (exports.AdEvents = {}));\r\nvar EventBus = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function EventBus() {\r\n        this.registrations = {};\r\n        this.logger = Logger_1.Logger.getInstance();\r\n    }\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    EventBus.prototype.addEventListener = function (type, listener) {\r\n        var listeners = this.getListeners(type), idx = listeners.indexOf(listener);\r\n        if (idx === -1) {\r\n            listeners.push(listener);\r\n        }\r\n    };\r\n    EventBus.prototype.removeEventListener = function (type, listener) {\r\n        var listeners = this.getListeners(type), idx = listeners.indexOf(listener);\r\n        if (idx !== -1) {\r\n            listeners.splice(idx, 1);\r\n        }\r\n    };\r\n    EventBus.prototype.removeAllEventListener = function () {\r\n        this.registrations = {};\r\n    };\r\n    EventBus.prototype.dispatchEvent = function (type, data) {\r\n        var listeners = this.getListeners(type).slice(), event = {\r\n            type: type,\r\n            data: data ? data : {}\r\n        };\r\n        // this.logger.debug(\'# Event: \' + type);\r\n        for (var i = 0; i < listeners.length; i += 1) {\r\n            listeners[i].call(this, event);\r\n        }\r\n    };\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    EventBus.prototype.getListeners = function (type) {\r\n        if (!(type in this.registrations)) {\r\n            this.registrations[type] = [];\r\n        }\r\n        return this.registrations[type];\r\n    };\r\n    return EventBus;\r\n}());\r\nexports.EventBus = EventBus;\r\n// export default EventBus;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n/**\r\n* Config utility class for managing configuration parameters.\r\n*/\r\nvar Config = /** @class */ (function () {\r\n    function Config() {\r\n        this._handleMainPlayerPlayback = true;\r\n        this._handleClickThrough = true;\r\n        this._filterTriggersFn = undefined;\r\n    }\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    Config.getInstance = function () {\r\n        if (this.instance === null) {\r\n            this.instance = new Config();\r\n        }\r\n        return this.instance;\r\n    };\r\n    Object.defineProperty(Config.prototype, "handleMainPlayerPlayback", {\r\n        // #endregion PUBLIC FUNCTIONS\r\n        // --------------------------------------------------\r\n        get: function () {\r\n            return this._handleMainPlayerPlayback;\r\n        },\r\n        set: function (value) {\r\n            this._handleMainPlayerPlayback = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Config.prototype, "handleClickThrough", {\r\n        get: function () {\r\n            return this._handleClickThrough;\r\n        },\r\n        set: function (value) {\r\n            this._handleClickThrough = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Config.prototype, "filterTriggersFn", {\r\n        get: function () {\r\n            return this._filterTriggersFn;\r\n        },\r\n        set: function (value) {\r\n            this._filterTriggersFn = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // #region MEMBERS\r\n    // --------------------------------------------------\r\n    Config.instance = null;\r\n    return Config;\r\n}());\r\nexports.Config = Config;\r\n// export default EventBus;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvbGliL0NvbmZpZy50cz8wZGRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkJFOztBQUVGOztFQUVFO0FBRUY7SUF3Qkk7UUFDSSxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztJQUN2QyxDQUFDO0lBakJELHFCQUFxQjtJQUNyQixxREFBcUQ7SUFFckQsMkJBQTJCO0lBQzNCLHFEQUFxRDtJQUU5QyxrQkFBVyxHQUFsQjtRQUNJLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFXRCxzQkFBSSw0Q0FBd0I7UUFINUIsOEJBQThCO1FBQzlCLHFEQUFxRDthQUVyRDtZQUNJLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO1FBQzFDLENBQUM7YUFFRCxVQUE4QixLQUFjO1lBQ3hDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7UUFDM0MsQ0FBQzs7O09BSkE7SUFNRCxzQkFBSSxzQ0FBa0I7YUFBdEI7WUFDSSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUNwQyxDQUFDO2FBRUQsVUFBd0IsS0FBYztZQUNsQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLENBQUM7OztPQUpBO0lBTUQsc0JBQUksb0NBQWdCO2FBQXBCO1lBQ0ksT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDbEMsQ0FBQzthQUVELFVBQXNCLEtBQWU7WUFDakMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUNuQyxDQUFDOzs7T0FKQTtJQWpERCxrQkFBa0I7SUFDbEIscURBQXFEO0lBRXRDLGVBQVEsR0FBVyxJQUFJLENBQUM7SUF1RDNDLGFBQUM7Q0FBQTtBQTVEWSx3QkFBTTtBQThEbkIsMkJBQTJCIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qIFRoZSBjb3B5cmlnaHQgaW4gdGhpcyBzb2Z0d2FyZSBtb2R1bGUgaXMgYmVpbmcgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIEJTRCBMaWNlbnNlLCBpbmNsdWRlZFxyXG4qIGJlbG93LiBUaGlzIHNvZnR3YXJlIG1vZHVsZSBtYXkgYmUgc3ViamVjdCB0byBvdGhlciB0aGlyZCBwYXJ0eSBhbmQvb3IgY29udHJpYnV0b3IgcmlnaHRzLFxyXG4qIGluY2x1ZGluZyBwYXRlbnQgcmlnaHRzLCBhbmQgbm8gc3VjaCByaWdodHMgYXJlIGdyYW50ZWQgdW5kZXIgdGhpcyBsaWNlbnNlLlxyXG4qXHJcbiogQ29weXJpZ2h0IChjKSAyMDE2LCBPcmFuZ2VcclxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4qXHJcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZFxyXG4qIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XHJcbiogLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zXHJcbiogICBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4qIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuKiAgIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXHJcbiogICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbiogLSBOZWl0aGVyIHRoZSBuYW1lIG9mIE9yYW5nZSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlXHJcbiogICBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSBtb2R1bGUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcbipcclxuKlxyXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMg4oCcQVMgSVPigJ0gQU5EIEFOWSBFWFBSRVNTIE9SXHJcbiogSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EXHJcbiogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9cclxuKiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXHJcbiogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxyXG4qIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLFxyXG4qIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTllcclxuKiBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cclxuKi9cclxuXHJcbi8qKlxyXG4qIENvbmZpZyB1dGlsaXR5IGNsYXNzIGZvciBtYW5hZ2luZyBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuXHJcbiovXHJcblxyXG5leHBvcnQgY2xhc3MgQ29uZmlnIHtcclxuXHJcbiAgICAvLyAjcmVnaW9uIE1FTUJFUlNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IENvbmZpZyA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfaGFuZGxlTWFpblBsYXllclBsYXliYWNrOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfaGFuZGxlQ2xpY2tUaHJvdWdoOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfZmlsdGVyVHJpZ2dlcnNGbjogRnVuY3Rpb247XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvbiBNRU1CRVJTXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8vICNyZWdpb24gUFVCTElDIEZVTkNUSU9OU1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBDb25maWcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTWFpblBsYXllclBsYXliYWNrID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDbGlja1Rocm91Z2ggPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2ZpbHRlclRyaWdnZXJzRm4gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvbiBQVUJMSUMgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIGdldCBoYW5kbGVNYWluUGxheWVyUGxheWJhY2sgKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVNYWluUGxheWVyUGxheWJhY2s7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldCBoYW5kbGVNYWluUGxheWVyUGxheWJhY2sgKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTWFpblBsYXllclBsYXliYWNrID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhbmRsZUNsaWNrVGhyb3VnaCAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUNsaWNrVGhyb3VnaDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc2V0IGhhbmRsZUNsaWNrVGhyb3VnaCAodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDbGlja1Rocm91Z2ggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZmlsdGVyVHJpZ2dlcnNGbiAoKTogRnVuY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJUcmlnZ2Vyc0ZuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzZXQgZmlsdGVyVHJpZ2dlcnNGbiAodmFsdWU6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZmlsdGVyVHJpZ2dlcnNGbiA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICNlbmRyZWdpb24gUFVCTElDIEZVTkNUSU9OU1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbn1cclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IEV2ZW50QnVzO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar ErrorCodes;\r\n(function (ErrorCodes) {\r\n    /**\r\n     * An error occured when downloading a MAST or VAST file\r\n     * Error data properties:\r\n     * @property <b>url</b>: string - the MAST or VAST file url\r\n     * @property <b>status</b>: number - the response status code\r\n     */\r\n    ErrorCodes[ErrorCodes["DOWNLOAD_ERR_FILE"] = 1] = "DOWNLOAD_ERR_FILE";\r\n    /**\r\n     * The downloaded MAST or VAST file is not in XML format\r\n     * Error data properties:\r\n     * @property <b>url</b>: string - the MAST or VAST file url\r\n     */\r\n    ErrorCodes[ErrorCodes["DOWNLOAD_ERR_NOT_XML"] = 2] = "DOWNLOAD_ERR_NOT_XML";\r\n    // NO_VALID_MEDIA_FOUND = 3,\r\n    // LOAD_MEDIA_FAILED = 4,\r\n    // UNSUPPORTED_MEDIA_FILE = 5,\r\n    // UNAVAILABLE_LINK = 6\r\n})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));\r\nexports.ErrorMessages = {};\r\nexports.ErrorMessages[ErrorCodes.DOWNLOAD_ERR_FILE] = \'Failed to download file\';\r\nexports.ErrorMessages[ErrorCodes.DOWNLOAD_ERR_NOT_XML] = \'The downloaded file format is not in xml format\';\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvRXJyb3JzLnRzP2JmYmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFZLFVBcUJYO0FBckJELFdBQVksVUFBVTtJQUVsQjs7Ozs7T0FLRztJQUNILHFFQUFxQjtJQUVyQjs7OztPQUlHO0lBQ0gsMkVBQXdCO0lBRXhCLDRCQUE0QjtJQUM1Qix5QkFBeUI7SUFDekIsOEJBQThCO0lBQzlCLHVCQUF1QjtBQUMzQixDQUFDLEVBckJXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBcUJyQjtBQWFZLHFCQUFhLEdBQUcsRUFBRTtBQUMvQixxQkFBYSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLHlCQUF5QixDQUFDO0FBQ3hFLHFCQUFhLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsaURBQWlELENBQUMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIEVycm9yQ29kZXMge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGRvd25sb2FkaW5nIGEgTUFTVCBvciBWQVNUIGZpbGVcclxuICAgICAqIEVycm9yIGRhdGEgcHJvcGVydGllczpcclxuICAgICAqIEBwcm9wZXJ0eSA8Yj51cmw8L2I+OiBzdHJpbmcgLSB0aGUgTUFTVCBvciBWQVNUIGZpbGUgdXJsXHJcbiAgICAgKiBAcHJvcGVydHkgPGI+c3RhdHVzPC9iPjogbnVtYmVyIC0gdGhlIHJlc3BvbnNlIHN0YXR1cyBjb2RlXHJcbiAgICAgKi9cclxuICAgIERPV05MT0FEX0VSUl9GSUxFID0gMSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkb3dubG9hZGVkIE1BU1Qgb3IgVkFTVCBmaWxlIGlzIG5vdCBpbiBYTUwgZm9ybWF0IFxyXG4gICAgICogRXJyb3IgZGF0YSBwcm9wZXJ0aWVzOlxyXG4gICAgICogQHByb3BlcnR5IDxiPnVybDwvYj46IHN0cmluZyAtIHRoZSBNQVNUIG9yIFZBU1QgZmlsZSB1cmxcclxuICAgICAqL1xyXG4gICAgRE9XTkxPQURfRVJSX05PVF9YTUwgPSAyLFxyXG5cclxuICAgIC8vIE5PX1ZBTElEX01FRElBX0ZPVU5EID0gMyxcclxuICAgIC8vIExPQURfTUVESUFfRkFJTEVEID0gNCxcclxuICAgIC8vIFVOU1VQUE9SVEVEX01FRElBX0ZJTEUgPSA1LFxyXG4gICAgLy8gVU5BVkFJTEFCTEVfTElOSyA9IDZcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFcnJvciB7XHJcbiAgICAvKiogVGhlIGVycm9yIGNvZGUgKi9cclxuICAgIGNvZGU6IEVycm9yQ29kZXMsXHJcblxyXG4gICAgLyoqIFRoZSBlcnJvciBtZXNzYWdlICovXHJcbiAgICBtZXNzYWdlOiBzdHJpbmcsXHJcblxyXG4gICAgLyoqIFRoZSBlcnJvciBkYXRhLiBSZWZlciB0byBlYWNoIGNvZGUgdG8gZ2V0IHRoZSBkYXRhIG9iamVjdCBwcm9wZXJ0aWVzIGRlc2NyaXB0aW9uICovXHJcbiAgICBkYXRhPzogb2JqZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFcnJvck1lc3NhZ2VzID0ge31cclxuRXJyb3JNZXNzYWdlc1tFcnJvckNvZGVzLkRPV05MT0FEX0VSUl9GSUxFXSA9ICdGYWlsZWQgdG8gZG93bmxvYWQgZmlsZSc7XHJcbkVycm9yTWVzc2FnZXNbRXJyb3JDb2Rlcy5ET1dOTE9BRF9FUlJfTk9UX1hNTF0gPSAnVGhlIGRvd25sb2FkZWQgZmlsZSBmb3JtYXQgaXMgbm90IGluIHhtbCBmb3JtYXQnO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n/**\r\n* @export class Mast\r\n* @ignore\r\n*/\r\nvar Mast = /** @class */ (function () {\r\n    function Mast() {\r\n        this.baseUrl = \'\'; // pointer to any number of Ad objects\r\n        this.triggers = [];\r\n    }\r\n    return Mast;\r\n}());\r\nexports.Mast = Mast;\r\n/**\r\n* @export class Trigger\r\n* @ignore\r\n*/\r\nvar Trigger = /** @class */ (function () {\r\n    function Trigger() {\r\n        this.id = \'\';\r\n        this.description = 0;\r\n        this.startConditions = []; // pointer to a list of start conditions to  : AdsPlayer.mast.model.Trigger.Condition\r\n        this.endConditions = []; // pointer to a list of end conditions : AdsPlayer.mast.model.Trigger.Condition\r\n        this.sources = []; // pointer to a list of sources : AdsPlayer.mast.model.Trigger.Source\r\n        this.alreadyProcessed = false; // mainly in the seeked case : do not replay trigger already played\r\n        this.vasts = [];\r\n        this.activated = false;\r\n    }\r\n    return Trigger;\r\n}());\r\nexports.Trigger = Trigger;\r\n/**\r\n* @export class Condition\r\n* @ignore\r\n*/\r\nvar Condition = /** @class */ (function () {\r\n    function Condition() {\r\n        this.type = \'\';\r\n        this.name = \'\';\r\n        this.value = \'\';\r\n        this.operator = \'\';\r\n        this.conditions = [];\r\n    }\r\n    return Condition;\r\n}());\r\nexports.Condition = Condition;\r\n// ConditionType\r\nvar CONDITION_TYPE;\r\n(function (CONDITION_TYPE) {\r\n    CONDITION_TYPE["EVENT"] = "event";\r\n    CONDITION_TYPE["PROPERTY"] = "property";\r\n})(CONDITION_TYPE = exports.CONDITION_TYPE || (exports.CONDITION_TYPE = {}));\r\n;\r\n// ConditionName\r\nvar CONDITION_NAME;\r\n(function (CONDITION_NAME) {\r\n    CONDITION_NAME["ON_ITEM_START"] = "OnItemStart";\r\n    CONDITION_NAME["ON_ITEM_END"] = "OnItemEnd";\r\n    CONDITION_NAME["POSITION"] = "Position";\r\n    CONDITION_NAME["DURATION"] = "Duration";\r\n})(CONDITION_NAME = exports.CONDITION_NAME || (exports.CONDITION_NAME = {}));\r\n;\r\n// ConditionOperator\r\nvar CONDITION_OPERATOR;\r\n(function (CONDITION_OPERATOR) {\r\n    CONDITION_OPERATOR["EQ"] = "EQ";\r\n    CONDITION_OPERATOR["NEQ"] = "NEQ";\r\n    CONDITION_OPERATOR["GTR"] = "GTR";\r\n    CONDITION_OPERATOR["GEQ"] = "GEQ";\r\n    CONDITION_OPERATOR["LT"] = "LT";\r\n    CONDITION_OPERATOR["LEQ"] = "LEQ";\r\n    CONDITION_OPERATOR["MOD"] = "MOD"; // modulo\r\n})(CONDITION_OPERATOR = exports.CONDITION_OPERATOR || (exports.CONDITION_OPERATOR = {}));\r\n;\r\n/**\r\n* @export class Source\r\n* @ignore\r\n*/\r\nvar Source = /** @class */ (function () {\r\n    // targets = [];\r\n    function Source() {\r\n        this.uri = \'\';\r\n        this.altReference = \'\';\r\n        this.format = \'\';\r\n        this.sources = [];\r\n    }\r\n    return Source;\r\n}());\r\nexports.Source = Source;\r\n// SourceFormat\r\nvar SOURCE_FORMAT;\r\n(function (SOURCE_FORMAT) {\r\n    SOURCE_FORMAT["VAST"] = "vast";\r\n    SOURCE_FORMAT["UIF"] = "uif";\r\n})(SOURCE_FORMAT = exports.SOURCE_FORMAT || (exports.SOURCE_FORMAT = {}));\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvbGliL21hc3QvbW9kZWwvTWFzdC50cz8zZThhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkJFOztBQUlGOzs7RUFHRTtBQUNGO0lBR0k7UUFGQSxZQUFPLEdBQVcsRUFBRSxDQUFDLENBQUMsc0NBQXNDO1FBQzVELGFBQVEsR0FBYyxFQUFFLENBQUM7SUFFekIsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQUFDO0FBTFksb0JBQUk7QUFPakI7OztFQUdFO0FBQ0Y7SUFTSTtRQVJBLE9BQUUsR0FBVSxFQUFFLENBQUM7UUFDZixnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUN4QixvQkFBZSxHQUFnQixFQUFFLENBQUMsQ0FBTSxxRkFBcUY7UUFDN0gsa0JBQWEsR0FBZ0IsRUFBRSxDQUFDLENBQVEsK0VBQStFO1FBQ3ZILFlBQU8sR0FBYSxFQUFFLENBQUMsQ0FBYyxxRUFBcUU7UUFDMUcscUJBQWdCLEdBQVksS0FBSyxDQUFDLENBQUUsbUVBQW1FO1FBQ3ZHLFVBQUssR0FBVyxFQUFFLENBQUM7UUFDbkIsY0FBUyxHQUFZLEtBQUssQ0FBQztJQUUzQixDQUFDO0lBQ0wsY0FBQztBQUFELENBQUM7QUFYWSwwQkFBTztBQWFwQjs7O0VBR0U7QUFDRjtJQU1BO1FBTEksU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBQ2xCLFVBQUssR0FBVyxFQUFFLENBQUM7UUFDbkIsYUFBUSxHQUFXLEVBQUUsQ0FBQztRQUN0QixlQUFVLEdBQWdCLEVBQUUsQ0FBQztJQUU3QixDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDO0FBUlksOEJBQVM7QUFVdEIsZ0JBQWdCO0FBQ2hCLElBQVksY0FJWDtBQUpELFdBQVksY0FBYztJQUN0QixpQ0FBZTtJQUNmLHVDQUFxQjtBQUV6QixDQUFDLEVBSlcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFJekI7QUFBQSxDQUFDO0FBRUYsZ0JBQWdCO0FBQ2hCLElBQVksY0FLWDtBQUxELFdBQVksY0FBYztJQUN0QiwrQ0FBNkI7SUFDN0IsMkNBQXlCO0lBQ3pCLHVDQUFxQjtJQUNyQix1Q0FBcUI7QUFDekIsQ0FBQyxFQUxXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBS3pCO0FBQUEsQ0FBQztBQUVGLG9CQUFvQjtBQUNwQixJQUFZLGtCQVFYO0FBUkQsV0FBWSxrQkFBa0I7SUFDMUIsK0JBQVM7SUFDVCxpQ0FBVztJQUNYLGlDQUFXO0lBQ1gsaUNBQVc7SUFDWCwrQkFBUztJQUNULGlDQUFXO0lBQ1gsaUNBQVcsRUFBRSxTQUFTO0FBQzFCLENBQUMsRUFSVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQVE3QjtBQUFBLENBQUM7QUFFRjs7O0VBR0U7QUFDRjtJQUtJLGdCQUFnQjtJQUNoQjtRQUxBLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFDakIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsV0FBTSxHQUFXLEVBQUUsQ0FBQztRQUNwQixZQUFPLEdBQVUsRUFBRSxDQUFDO0lBR3BCLENBQUM7SUFDTCxhQUFDO0FBQUQsQ0FBQztBQVJZLHdCQUFNO0FBVW5CLGVBQWU7QUFDZixJQUFZLGFBR1g7QUFIRCxXQUFZLGFBQWE7SUFDckIsOEJBQWE7SUFDYiw0QkFBVztBQUNmLENBQUMsRUFIVyxhQUFhLEdBQWIscUJBQWEsS0FBYixxQkFBYSxRQUd4QjtBQUFBLENBQUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiogVGhlIGNvcHlyaWdodCBpbiB0aGlzIHNvZnR3YXJlIG1vZHVsZSBpcyBiZWluZyBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UsIGluY2x1ZGVkXHJcbiogYmVsb3cuIFRoaXMgc29mdHdhcmUgbW9kdWxlIG1heSBiZSBzdWJqZWN0IHRvIG90aGVyIHRoaXJkIHBhcnR5IGFuZC9vciBjb250cmlidXRvciByaWdodHMsXHJcbiogaW5jbHVkaW5nIHBhdGVudCByaWdodHMsIGFuZCBubyBzdWNoIHJpZ2h0cyBhcmUgZ3JhbnRlZCB1bmRlciB0aGlzIGxpY2Vuc2UuXHJcbipcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTYsIE9yYW5nZVxyXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbipcclxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkXHJcbiogcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnNcclxuKiAgIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbiogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxyXG4qICAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcclxuKiAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgT3JhbmdlIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcclxuKiAgIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIG1vZHVsZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuKlxyXG4qXHJcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyDigJxBUyBJU+KAnSBBTkQgQU5ZIEVYUFJFU1MgT1JcclxuKiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcclxuKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1xyXG4qIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcclxuKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXHJcbiogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXHJcbiogV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWVxyXG4qIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4qL1xyXG5cclxuaW1wb3J0IHsgVmFzdCB9IGZyb20gJy4uLy4uL3Zhc3QvbW9kZWwvVmFzdCc7XHJcblxyXG4vKipcclxuKiBAZXhwb3J0IGNsYXNzIE1hc3RcclxuKiBAaWdub3JlXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBNYXN0IHtcclxuICAgIGJhc2VVcmw6IHN0cmluZyA9ICcnOyAvLyBwb2ludGVyIHRvIGFueSBudW1iZXIgb2YgQWQgb2JqZWN0c1xyXG4gICAgdHJpZ2dlcnM6IFRyaWdnZXJbXSA9IFtdO1xyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuKiBAZXhwb3J0IGNsYXNzIFRyaWdnZXJcclxuKiBAaWdub3JlXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBUcmlnZ2VyIHtcclxuICAgIGlkOnN0cmluZyA9ICcnO1xyXG4gICAgZGVzY3JpcHRpb246IG51bWJlciA9IDA7XHJcbiAgICBzdGFydENvbmRpdGlvbnM6IENvbmRpdGlvbltdID0gW107ICAgICAgLy8gcG9pbnRlciB0byBhIGxpc3Qgb2Ygc3RhcnQgY29uZGl0aW9ucyB0byAgOiBBZHNQbGF5ZXIubWFzdC5tb2RlbC5UcmlnZ2VyLkNvbmRpdGlvblxyXG4gICAgZW5kQ29uZGl0aW9uczogQ29uZGl0aW9uW10gPSBbXTsgICAgICAgIC8vIHBvaW50ZXIgdG8gYSBsaXN0IG9mIGVuZCBjb25kaXRpb25zIDogQWRzUGxheWVyLm1hc3QubW9kZWwuVHJpZ2dlci5Db25kaXRpb25cclxuICAgIHNvdXJjZXM6IFNvdXJjZVtdID0gW107ICAgICAgICAgICAgICAvLyBwb2ludGVyIHRvIGEgbGlzdCBvZiBzb3VyY2VzIDogQWRzUGxheWVyLm1hc3QubW9kZWwuVHJpZ2dlci5Tb3VyY2VcclxuICAgIGFscmVhZHlQcm9jZXNzZWQ6IGJvb2xlYW4gPSBmYWxzZTsgIC8vIG1haW5seSBpbiB0aGUgc2Vla2VkIGNhc2UgOiBkbyBub3QgcmVwbGF5IHRyaWdnZXIgYWxyZWFkeSBwbGF5ZWRcclxuICAgIHZhc3RzOiBWYXN0W10gPSBbXTtcclxuICAgIGFjdGl2YXRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuKiBAZXhwb3J0IGNsYXNzIENvbmRpdGlvblxyXG4qIEBpZ25vcmVcclxuKi9cclxuZXhwb3J0IGNsYXNzIENvbmRpdGlvbiB7XHJcbiAgICB0eXBlOiBzdHJpbmcgPSAnJztcclxuICAgIG5hbWU6IHN0cmluZyA9ICcnO1xyXG4gICAgdmFsdWU6IHN0cmluZyA9ICcnO1xyXG4gICAgb3BlcmF0b3I6IHN0cmluZyA9ICcnO1xyXG4gICAgY29uZGl0aW9uczogQ29uZGl0aW9uW10gPSBbXTtcclxuY29uc3RydWN0b3IgKCkge1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDb25kaXRpb25UeXBlXHJcbmV4cG9ydCBlbnVtIENPTkRJVElPTl9UWVBFIHtcclxuICAgIEVWRU5UID0gJ2V2ZW50JyxcclxuICAgIFBST1BFUlRZID0gJ3Byb3BlcnR5J1xyXG5cclxufTtcclxuXHJcbi8vIENvbmRpdGlvbk5hbWVcclxuZXhwb3J0IGVudW0gQ09ORElUSU9OX05BTUUge1xyXG4gICAgT05fSVRFTV9TVEFSVCA9ICdPbkl0ZW1TdGFydCcsXHJcbiAgICBPTl9JVEVNX0VORCA9ICdPbkl0ZW1FbmQnLFxyXG4gICAgUE9TSVRJT04gPSAnUG9zaXRpb24nLFxyXG4gICAgRFVSQVRJT04gPSAnRHVyYXRpb24nXHJcbn07XHJcblxyXG4vLyBDb25kaXRpb25PcGVyYXRvclxyXG5leHBvcnQgZW51bSBDT05ESVRJT05fT1BFUkFUT1Ige1xyXG4gICAgRVEgPSAnRVEnLCAgLy8gZXF1YWxcclxuICAgIE5FUSA9ICdORVEnLCAvLyBub3QgZXF1YWxcclxuICAgIEdUUiA9ICdHVFInLCAvLyBncmVhdGVyXHJcbiAgICBHRVEgPSAnR0VRJywgLy8gZ3JlYXRlciBvciBlcXVhbFxyXG4gICAgTFQgPSAnTFQnLCAgLy8gbG93ZXJcclxuICAgIExFUSA9ICdMRVEnLCAvLyBsb3dlciBvciBlcXVhbFxyXG4gICAgTU9EID0gJ01PRCcgIC8vIG1vZHVsb1xyXG59O1xyXG5cclxuLyoqXHJcbiogQGV4cG9ydCBjbGFzcyBTb3VyY2VcclxuKiBAaWdub3JlXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBTb3VyY2Uge1xyXG4gICAgdXJpOiBzdHJpbmcgPSAnJztcclxuICAgIGFsdFJlZmVyZW5jZTogc3RyaW5nID0gJyc7XHJcbiAgICBmb3JtYXQ6IHN0cmluZyA9ICcnO1xyXG4gICAgc291cmNlczogYW55W10gPSBbXTtcclxuICAgIC8vIHRhcmdldHMgPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIH1cclxufVxyXG5cclxuLy8gU291cmNlRm9ybWF0XHJcbmV4cG9ydCBlbnVtIFNPVVJDRV9GT1JNQVQge1xyXG4gICAgVkFTVCA9ICd2YXN0JyxcclxuICAgIFVJRiA9ICd1aWYnXHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar XmlDom = /** @class */ (function () {\r\n    function XmlDom() {\r\n    }\r\n    XmlDom.getElementsByTagName = function (node, name) {\r\n        var elements = node.getElementsByTagName(name);\r\n        if (elements.length > 0) {\r\n            return elements;\r\n        }\r\n        var child = node.firstElementChild || node.firstChild;\r\n        if (!child) {\r\n            return elements;\r\n        }\r\n        var namespaceURI = child.namespaceURI;\r\n        return node.getElementsByTagNameNS(namespaceURI, name);\r\n    };\r\n    XmlDom.getElement = function (node, name) {\r\n        var elements = this.getElementsByTagName(node, name);\r\n        if (elements.length < 1) {\r\n            return null;\r\n        }\r\n        return elements[0];\r\n    };\r\n    XmlDom.getElements = function (node, name) {\r\n        return this.getElementsByTagName(node, name);\r\n    };\r\n    XmlDom.getSubElements = function (node, name, subName) {\r\n        var element = this.getElement(node, name);\r\n        if (element === null) {\r\n            return [];\r\n        }\r\n        return this.getElements(element, subName);\r\n    };\r\n    XmlDom.getChildNode = function (node, name) {\r\n        if (!node || !node.childNodes) {\r\n            return null;\r\n        }\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            if (node.childNodes[i].nodeName === name) {\r\n                return node.childNodes[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    XmlDom.getNodeTextValue = function (node) {\r\n        var cdataSection = this.getChildNode(node, '#cdata-section'), textSection = this.getChildNode(node, '#text');\r\n        if (cdataSection) {\r\n            return cdataSection.nodeValue;\r\n        }\r\n        else if (textSection) {\r\n            return textSection.nodeValue;\r\n        }\r\n        return '';\r\n    };\r\n    XmlDom.getChildNodeTextValue = function (node, name) {\r\n        var element = this.getElement(node, name);\r\n        if (element === null) {\r\n            return '';\r\n        }\r\n        return this.getNodeTextValue(element);\r\n    };\r\n    return XmlDom;\r\n}());\r\nexports.XmlDom = XmlDom;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar AdsPlayer_1 = __webpack_require__(9);\r\nexports.AdsPlayer = AdsPlayer_1.AdsPlayer;\r\nvar Events_1 = __webpack_require__(1);\r\nexports.EventTypes = Events_1.EventTypes;\r\nvar Errors_1 = __webpack_require__(5);\r\nexports.ErrorCodes = Errors_1.ErrorCodes;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9pbmRleC50cz9hOTU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTRDO0FBQW5DLHlDQUFTO0FBQ2xCLHNDQUFpRDtBQUFqQyx3Q0FBVTtBQUMxQixzQ0FBMEM7QUFBakMsd0NBQVUiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEFkc1BsYXllciB9IGZyb20gJy4vc3JjL0Fkc1BsYXllcic7XHJcbmV4cG9ydCB7IEV2ZW50LCBFdmVudFR5cGVzIH0gZnJvbSAnLi9zcmMvRXZlbnRzJztcclxuZXhwb3J0IHsgRXJyb3JDb2RlcyB9IGZyb20gJy4vc3JjL0Vycm9ycyc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar AdsPlayerController_1 = __webpack_require__(10);\r\nvar EventBus_1 = __webpack_require__(3);\r\nvar Config_1 = __webpack_require__(4);\r\nvar Logger_1 = __webpack_require__(0);\r\nvar Events_1 = __webpack_require__(1);\r\nvar NAME = \'AdsPlayer\';\r\nvar VERSION = "1.7.0-dev";\r\nvar BUILDDATE = "2020-11-19";\r\nvar AdsPlayer = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function AdsPlayer() {\r\n        this.adsPlayerController = null;\r\n        this.eventBus = new EventBus_1.EventBus();\r\n        this.logger = Logger_1.Logger.getInstance();\r\n        this.config = Config_1.Config.getInstance();\r\n        this.error = null;\r\n        this.onErrorListener = this.onError.bind(this);\r\n    }\r\n    /**\r\n    * Returns the plugin name.\r\n    * @return {string} the plugin name\r\n    */\r\n    AdsPlayer.prototype.getName = function () {\r\n        return NAME;\r\n    };\r\n    /**\r\n    * Initializes the plugin.\r\n    * @param {HTMLMediaElement} video - the main video player\r\n    * @param {HTMLElement} adsPlayerContainer - the HTML element that will contains ad media element\r\n    * @param {boolean} handleMainPlayerPlayback - true (by default) if AdsPlayer shall handle the main video playback state\r\n    * @param {boolean} handleClickThrough - true (by default) if AdsPlayer shall handle the user clicks during ad playback\r\n    * @param {Function} filterTriggersFn - the callback function to filter triggers\r\n    */\r\n    AdsPlayer.prototype.init = function (video, adsPlayerContainer, handleMainPlayerPlayback, handleClickThrough, filterTriggersFn) {\r\n        if (handleMainPlayerPlayback === void 0) { handleMainPlayerPlayback = true; }\r\n        if (handleClickThrough === void 0) { handleClickThrough = true; }\r\n        this.adsPlayerController = new AdsPlayerController_1.AdsPlayerController(this.eventBus);\r\n        this.adsPlayerController.init(video, adsPlayerContainer);\r\n        this.config.handleMainPlayerPlayback = handleMainPlayerPlayback;\r\n        this.config.handleClickThrough = handleClickThrough;\r\n        this.config.filterTriggersFn = filterTriggersFn;\r\n        this.eventBus.addEventListener(Events_1.EventTypes.ERROR, this.onErrorListener);\r\n    };\r\n    /**\r\n    * This method is invoked when a new stream is to be loaded/opened.\r\n    * @param {object} url - the ads (MAST) description file url\r\n    * @param {number} startTime - the playback time before which triggers shall be ignored\r\n    */\r\n    AdsPlayer.prototype.load = function (adsUrl, startTime) {\r\n        return this.adsPlayerController.load(adsUrl, startTime);\r\n    };\r\n    /**\r\n    * This method is invoked when the current stream is to be stopped.\r\n    */\r\n    AdsPlayer.prototype.stop = function () {\r\n        this.adsPlayerController.stop();\r\n    };\r\n    /**\r\n    * This method is invoked when the player is to be reset.\r\n    */\r\n    AdsPlayer.prototype.reset = function () {\r\n        this.adsPlayerController.reset();\r\n    };\r\n    /**\r\n    * This method is invoked when this plugin is being removed/destroyed.\r\n    */\r\n    AdsPlayer.prototype.destroy = function () {\r\n        this.adsPlayerController.destroy();\r\n        this.eventBus.removeAllEventListener();\r\n    };\r\n    /**\r\n    * Returns the plugin version.\r\n    * @return {string} the plugin version\r\n    */\r\n    AdsPlayer.prototype.getVersion = function () {\r\n        return VERSION;\r\n    };\r\n    /**\r\n    * Returns the full plugin version, including git revision\r\n    * @return {string} the full plugin version, including git revision\r\n    */\r\n    AdsPlayer.prototype.getVersionFull = function () {\r\n        return VERSION;\r\n    };\r\n    /**\r\n    * Returns the build date.\r\n    * @return {string} the build date\r\n    */\r\n    AdsPlayer.prototype.getBuildDate = function () {\r\n        return BUILDDATE;\r\n    };\r\n    /**\r\n    * Plays/resumes the playback of the current ad.\r\n    */\r\n    AdsPlayer.prototype.play = function () {\r\n        this.adsPlayerController.play();\r\n    };\r\n    /**\r\n    * Pauses the playback of the current ad.\r\n    */\r\n    AdsPlayer.prototype.pause = function () {\r\n        this.adsPlayerController.pause();\r\n    };\r\n    /**\r\n    * Registers a listener on the specified event. See {@link Event} for the syntax of the events\r\n    * and {@link EventTypes} for the types of event that can be raised.\r\n    * @param {string} type - the event type for listen to\r\n    * @param {callback} listener - the callback which is called when an event of the specified type occurs\r\n    */\r\n    AdsPlayer.prototype.addEventListener = function (type, listener) {\r\n        this.eventBus.addEventListener(type, listener);\r\n    };\r\n    /**\r\n    * Unregisters the listener previously registered with the addEventListener() method.\r\n    * @param {string} type - the event type on which the listener was registered\r\n    * @param {callback} listener - the callback which was registered to the event type\r\n    */\r\n    AdsPlayer.prototype.removeEventListener = function (type, listener) {\r\n        this.eventBus.removeEventListener(type, listener);\r\n    };\r\n    /**\r\n    * Returns the Error object for the most recent error.\r\n    * @return {object} the Error object for the most recent error, or null if there has not been an error\r\n    */\r\n    AdsPlayer.prototype.getError = function () {\r\n        return this.error;\r\n    };\r\n    /**\r\n    * Enables or disables log messages.\r\n    * @return {boolean} enable - true to enable log messages, false otherwise\r\n    */\r\n    AdsPlayer.prototype.enableLogs = function (enable) {\r\n        this.logger.setLevel(enable ? 4 : 0);\r\n    };\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    AdsPlayer.prototype.onError = function (e) {\r\n        this.error = e.data;\r\n    };\r\n    return AdsPlayer;\r\n}());\r\nexports.AdsPlayer = AdsPlayer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvQWRzUGxheWVyLnRzPzIwZmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEyQkU7O0FBRUYsb0RBQWdFO0FBQ2hFLHdDQUEwQztBQUMxQyxzQ0FBc0M7QUFDdEMsc0NBQXNDO0FBQ3RDLHNDQUFzQztBQUV0QyxJQUFNLElBQUksR0FBRyxXQUFXLENBQUM7QUFFekIsSUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDO0FBRTVCLElBQU0sU0FBUyxHQUFHLFlBQWEsQ0FBQztBQUVoQztJQWNJLHFCQUFxQjtJQUNyQixxREFBcUQ7SUFFckQsMkJBQTJCO0lBQzNCLHFEQUFxRDtJQUVyRDtRQUNJLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFRLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLGVBQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7O01BR0U7SUFDRiwyQkFBTyxHQUFQO1FBQ0ksT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7O01BT0U7SUFDRix3QkFBSSxHQUFKLFVBQU0sS0FBdUIsRUFDdkIsa0JBQStCLEVBQy9CLHdCQUF3QyxFQUN4QyxrQkFBa0MsRUFDbEMsZ0JBQTJCO1FBRjNCLDBFQUF3QztRQUN4Qyw4REFBa0M7UUFFcEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUkseUNBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsR0FBRyx3QkFBd0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVEOzs7O01BSUU7SUFDRix3QkFBSSxHQUFKLFVBQU0sTUFBYyxFQUFFLFNBQWtCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOztNQUVFO0lBQ0Ysd0JBQUksR0FBSjtRQUNJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7O01BRUU7SUFDRix5QkFBSyxHQUFMO1FBQ0ksSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7TUFFRTtJQUNGLDJCQUFPLEdBQVA7UUFDSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7O01BR0U7SUFDRiw4QkFBVSxHQUFWO1FBQ0ksT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7TUFHRTtJQUNGLGtDQUFjLEdBQWQ7UUFDSSxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQ7OztNQUdFO0lBQ0YsZ0NBQVksR0FBWjtRQUNJLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7TUFFRTtJQUNGLHdCQUFJLEdBQUo7UUFDSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOztNQUVFO0lBQ0YseUJBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7O01BS0U7SUFDRixvQ0FBZ0IsR0FBaEIsVUFBa0IsSUFBWSxFQUFFLFFBQWE7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O01BSUU7SUFDRix1Q0FBbUIsR0FBbkIsVUFBcUIsSUFBWSxFQUFFLFFBQWE7UUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7TUFHRTtJQUNGLDRCQUFRLEdBQVI7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7TUFHRTtJQUNGLDhCQUFVLEdBQVYsVUFBWSxNQUFNO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsNEJBQTRCO0lBQzVCLHFEQUFxRDtJQUU3QywyQkFBTyxHQUFmLFVBQWlCLENBQUM7UUFDZCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUlMLGdCQUFDO0FBQUQsQ0FBQztBQTVLWSw4QkFBUyIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuKiBUaGUgY29weXJpZ2h0IGluIHRoaXMgc29mdHdhcmUgbW9kdWxlIGlzIGJlaW5nIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSBCU0QgTGljZW5zZSwgaW5jbHVkZWRcclxuKiBiZWxvdy4gVGhpcyBzb2Z0d2FyZSBtb2R1bGUgbWF5IGJlIHN1YmplY3QgdG8gb3RoZXIgdGhpcmQgcGFydHkgYW5kL29yIGNvbnRyaWJ1dG9yIHJpZ2h0cyxcclxuKiBpbmNsdWRpbmcgcGF0ZW50IHJpZ2h0cywgYW5kIG5vIHN1Y2ggcmlnaHRzIGFyZSBncmFudGVkIHVuZGVyIHRoaXMgbGljZW5zZS5cclxuKlxyXG4qIENvcHlyaWdodCAoYykgMjAxNiwgT3JhbmdlXHJcbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuKlxyXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWRcclxuKiBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxyXG4qIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9uc1xyXG4qICAgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuKiAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mXHJcbiogICBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxyXG4qICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxyXG4qIC0gTmVpdGhlciB0aGUgbmFtZSBvZiBPcmFuZ2Ugbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZVxyXG4qICAgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgbW9kdWxlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4qXHJcbipcclxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIOKAnEFTIElT4oCdIEFORCBBTlkgRVhQUkVTUyBPUlxyXG4qIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORFxyXG4qIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPXHJcbiogQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxyXG4qIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcclxuKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSxcclxuKiBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZXHJcbiogV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbiovXHJcblxyXG5pbXBvcnQgeyBBZHNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSAnLi9saWIvQWRzUGxheWVyQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSAnLi9saWIvRXZlbnRCdXMnO1xyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuL2xpYi9Db25maWcnO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xpYi9Mb2dnZXInO1xyXG5pbXBvcnQgeyBFdmVudFR5cGVzIH0gZnJvbSAnLi9FdmVudHMnO1xyXG5cclxuY29uc3QgTkFNRSA9ICdBZHNQbGF5ZXInO1xyXG5kZWNsYXJlIGNvbnN0IF9fVkVSU0lPTl9fOiBzdHJpbmc7XHJcbmNvbnN0IFZFUlNJT04gPSBfX1ZFUlNJT05fXztcclxuZGVjbGFyZSBjb25zdCBfX0JVSUxEREFURV9fOiBzdHJpbmc7XHJcbmNvbnN0IEJVSUxEREFURSA9IF9fQlVJTEREQVRFX187XHJcblxyXG5leHBvcnQgY2xhc3MgQWRzUGxheWVyIHtcclxuXHJcbiAgICAvLyAjcmVnaW9uIE1FTUJFUlNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgcHJpdmF0ZSBhZHNQbGF5ZXJDb250cm9sbGVyOiBBZHNQbGF5ZXJDb250cm9sbGVyO1xyXG4gICAgcHJpdmF0ZSBjb25maWc6IENvbmZpZztcclxuICAgIHByaXZhdGUgbG9nZ2VyOiBMb2dnZXI7XHJcbiAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cztcclxuXHJcbiAgICBwcml2YXRlIGVycm9yO1xyXG4gICAgcHJpdmF0ZSBvbkVycm9yTGlzdGVuZXI7XHJcblxyXG5cclxuICAgIC8vICNlbmRyZWdpb24gTUVNQkVSU1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAvLyAjcmVnaW9uIFBVQkxJQyBGVU5DVElPTlNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHRoaXMuYWRzUGxheWVyQ29udHJvbGxlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ldmVudEJ1cyA9IG5ldyBFdmVudEJ1cygpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBDb25maWcuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbkVycm9yTGlzdGVuZXIgPSB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogUmV0dXJucyB0aGUgcGx1Z2luIG5hbWUuXHJcbiAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHBsdWdpbiBuYW1lXHJcbiAgICAqL1xyXG4gICAgZ2V0TmFtZSAoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gTkFNRTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbi5cclxuICAgICogQHBhcmFtIHtIVE1MTWVkaWFFbGVtZW50fSB2aWRlbyAtIHRoZSBtYWluIHZpZGVvIHBsYXllclxyXG4gICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBhZHNQbGF5ZXJDb250YWluZXIgLSB0aGUgSFRNTCBlbGVtZW50IHRoYXQgd2lsbCBjb250YWlucyBhZCBtZWRpYSBlbGVtZW50XHJcbiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFuZGxlTWFpblBsYXllclBsYXliYWNrIC0gdHJ1ZSAoYnkgZGVmYXVsdCkgaWYgQWRzUGxheWVyIHNoYWxsIGhhbmRsZSB0aGUgbWFpbiB2aWRlbyBwbGF5YmFjayBzdGF0ZVxyXG4gICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhbmRsZUNsaWNrVGhyb3VnaCAtIHRydWUgKGJ5IGRlZmF1bHQpIGlmIEFkc1BsYXllciBzaGFsbCBoYW5kbGUgdGhlIHVzZXIgY2xpY2tzIGR1cmluZyBhZCBwbGF5YmFja1xyXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJUcmlnZ2Vyc0ZuIC0gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpbHRlciB0cmlnZ2Vyc1xyXG4gICAgKi9cclxuICAgIGluaXQgKHZpZGVvOiBIVE1MTWVkaWFFbGVtZW50LFxyXG4gICAgICAgICAgYWRzUGxheWVyQ29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuICAgICAgICAgIGhhbmRsZU1haW5QbGF5ZXJQbGF5YmFjazogYm9vbGVhbiA9IHRydWUsXHJcbiAgICAgICAgICBoYW5kbGVDbGlja1Rocm91Z2g6IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgICAgICAgZmlsdGVyVHJpZ2dlcnNGbj86IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5hZHNQbGF5ZXJDb250cm9sbGVyID0gbmV3IEFkc1BsYXllckNvbnRyb2xsZXIodGhpcy5ldmVudEJ1cyk7XHJcbiAgICAgICAgdGhpcy5hZHNQbGF5ZXJDb250cm9sbGVyLmluaXQodmlkZW8sIGFkc1BsYXllckNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5jb25maWcuaGFuZGxlTWFpblBsYXllclBsYXliYWNrID0gaGFuZGxlTWFpblBsYXllclBsYXliYWNrO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmhhbmRsZUNsaWNrVGhyb3VnaCA9IGhhbmRsZUNsaWNrVGhyb3VnaDtcclxuICAgICAgICB0aGlzLmNvbmZpZy5maWx0ZXJUcmlnZ2Vyc0ZuID0gZmlsdGVyVHJpZ2dlcnNGbjtcclxuICAgICAgICB0aGlzLmV2ZW50QnVzLmFkZEV2ZW50TGlzdGVuZXIoRXZlbnRUeXBlcy5FUlJPUiwgdGhpcy5vbkVycm9yTGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIHdoZW4gYSBuZXcgc3RyZWFtIGlzIHRvIGJlIGxvYWRlZC9vcGVuZWQuXHJcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSB1cmwgLSB0aGUgYWRzIChNQVNUKSBkZXNjcmlwdGlvbiBmaWxlIHVybFxyXG4gICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRUaW1lIC0gdGhlIHBsYXliYWNrIHRpbWUgYmVmb3JlIHdoaWNoIHRyaWdnZXJzIHNoYWxsIGJlIGlnbm9yZWRcclxuICAgICovXHJcbiAgICBsb2FkIChhZHNVcmw6IHN0cmluZywgc3RhcnRUaW1lPzogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRzUGxheWVyQ29udHJvbGxlci5sb2FkKGFkc1VybCwgc3RhcnRUaW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCB3aGVuIHRoZSBjdXJyZW50IHN0cmVhbSBpcyB0byBiZSBzdG9wcGVkLlxyXG4gICAgKi9cclxuICAgIHN0b3AgKCkge1xyXG4gICAgICAgIHRoaXMuYWRzUGxheWVyQ29udHJvbGxlci5zdG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFRoaXMgbWV0aG9kIGlzIGludm9rZWQgd2hlbiB0aGUgcGxheWVyIGlzIHRvIGJlIHJlc2V0LlxyXG4gICAgKi9cclxuICAgIHJlc2V0ICgpIHtcclxuICAgICAgICB0aGlzLmFkc1BsYXllckNvbnRyb2xsZXIucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCB3aGVuIHRoaXMgcGx1Z2luIGlzIGJlaW5nIHJlbW92ZWQvZGVzdHJveWVkLlxyXG4gICAgKi9cclxuICAgIGRlc3Ryb3kgKCkge1xyXG4gICAgICAgIHRoaXMuYWRzUGxheWVyQ29udHJvbGxlci5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5yZW1vdmVBbGxFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFJldHVybnMgdGhlIHBsdWdpbiB2ZXJzaW9uLlxyXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBwbHVnaW4gdmVyc2lvblxyXG4gICAgKi9cclxuICAgIGdldFZlcnNpb24gKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFJldHVybnMgdGhlIGZ1bGwgcGx1Z2luIHZlcnNpb24sIGluY2x1ZGluZyBnaXQgcmV2aXNpb25cclxuICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgZnVsbCBwbHVnaW4gdmVyc2lvbiwgaW5jbHVkaW5nIGdpdCByZXZpc2lvblxyXG4gICAgKi9cclxuICAgIGdldFZlcnNpb25GdWxsICgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBSZXR1cm5zIHRoZSBidWlsZCBkYXRlLlxyXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBidWlsZCBkYXRlXHJcbiAgICAqL1xyXG4gICAgZ2V0QnVpbGREYXRlICgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBCVUlMRERBVEU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFBsYXlzL3Jlc3VtZXMgdGhlIHBsYXliYWNrIG9mIHRoZSBjdXJyZW50IGFkLlxyXG4gICAgKi9cclxuICAgIHBsYXkgKCkge1xyXG4gICAgICAgIHRoaXMuYWRzUGxheWVyQ29udHJvbGxlci5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFBhdXNlcyB0aGUgcGxheWJhY2sgb2YgdGhlIGN1cnJlbnQgYWQuXHJcbiAgICAqL1xyXG4gICAgcGF1c2UgKCkge1xyXG4gICAgICAgIHRoaXMuYWRzUGxheWVyQ29udHJvbGxlci5wYXVzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciBvbiB0aGUgc3BlY2lmaWVkIGV2ZW50LiBTZWUge0BsaW5rIEV2ZW50fSBmb3IgdGhlIHN5bnRheCBvZiB0aGUgZXZlbnRzXHJcbiAgICAqIGFuZCB7QGxpbmsgRXZlbnRUeXBlc30gZm9yIHRoZSB0eXBlcyBvZiBldmVudCB0aGF0IGNhbiBiZSByYWlzZWQuXHJcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gdGhlIGV2ZW50IHR5cGUgZm9yIGxpc3RlbiB0b1xyXG4gICAgKiBAcGFyYW0ge2NhbGxiYWNrfSBsaXN0ZW5lciAtIHRoZSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb2NjdXJzXHJcbiAgICAqL1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lciAodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVW5yZWdpc3RlcnMgdGhlIGxpc3RlbmVyIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB3aXRoIHRoZSBhZGRFdmVudExpc3RlbmVyKCkgbWV0aG9kLlxyXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIHRoZSBldmVudCB0eXBlIG9uIHdoaWNoIHRoZSBsaXN0ZW5lciB3YXMgcmVnaXN0ZXJlZFxyXG4gICAgKiBAcGFyYW0ge2NhbGxiYWNrfSBsaXN0ZW5lciAtIHRoZSBjYWxsYmFjayB3aGljaCB3YXMgcmVnaXN0ZXJlZCB0byB0aGUgZXZlbnQgdHlwZVxyXG4gICAgKi9cclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIgKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRCdXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFJldHVybnMgdGhlIEVycm9yIG9iamVjdCBmb3IgdGhlIG1vc3QgcmVjZW50IGVycm9yLlxyXG4gICAgKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBFcnJvciBvYmplY3QgZm9yIHRoZSBtb3N0IHJlY2VudCBlcnJvciwgb3IgbnVsbCBpZiB0aGVyZSBoYXMgbm90IGJlZW4gYW4gZXJyb3JcclxuICAgICovXHJcbiAgICBnZXRFcnJvciAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgbG9nIG1lc3NhZ2VzLlxyXG4gICAgKiBAcmV0dXJuIHtib29sZWFufSBlbmFibGUgLSB0cnVlIHRvIGVuYWJsZSBsb2cgbWVzc2FnZXMsIGZhbHNlIG90aGVyd2lzZVxyXG4gICAgKi9cclxuICAgIGVuYWJsZUxvZ3MgKGVuYWJsZSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnNldExldmVsKGVuYWJsZT8gNCA6IDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICNyZWdpb24gUFJJVkFURSBGVU5DVElPTlNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgcHJpdmF0ZSBvbkVycm9yIChlKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGUuZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAjZW5kcmVnaW9uIFBSSVZBVEUgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Config_1 = __webpack_require__(4);\r\nvar Logger_1 = __webpack_require__(0);\r\nvar FileLoader_1 = __webpack_require__(11);\r\nvar ErrorHandler_1 = __webpack_require__(12);\r\nvar EventBus_1 = __webpack_require__(3);\r\nvar MastParser_1 = __webpack_require__(13);\r\nvar TriggerManager_1 = __webpack_require__(14);\r\nvar VastParser_1 = __webpack_require__(15);\r\nvar VastPlayerManager_1 = __webpack_require__(17);\r\nvar utils_1 = __webpack_require__(2);\r\nvar Events_1 = __webpack_require__(1);\r\nvar AdsPlayerController = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function AdsPlayerController(eventBus) {\r\n        this.mainVideo = null;\r\n        this.adsPlayerContainer = null;\r\n        this.mast = null;\r\n        this.fileLoaders = [];\r\n        this.triggerManagers = [];\r\n        this.vastPlayerManager = null;\r\n        this.mastParser = new MastParser_1.MastParser();\r\n        this.vastParser = new VastParser_1.VastParser();\r\n        this.config = Config_1.Config.getInstance();\r\n        this.logger = Logger_1.Logger.getInstance();\r\n        this.eventBus = eventBus;\r\n        this.errorHandler = new ErrorHandler_1.ErrorHandler(eventBus);\r\n        this.onVideoPlayingListener = this.onVideoPlaying.bind(this);\r\n        this.onVideoTimeupdateListener = this.onVideoTimeupdate.bind(this);\r\n        this.onVideoEndedListener = this.onVideoEnded.bind(this);\r\n        this.onTriggerEndListener = this.onTriggerEnd.bind(this);\r\n        this.currentTrigger = null;\r\n    }\r\n    /**\r\n     * Initialize the Ads Player Controller.\r\n     * @method init\r\n     * @access public\r\n     * @memberof AdsPlayerController#\r\n     * @param {Object} video - the HTML5 video element used by the main media player\r\n     * @param {Object} adsPlayerContainer - The container to create the HTML5 video/image elements used to play and render the ads media\r\n     */\r\n    AdsPlayerController.prototype.init = function (video, adsPlayerContainer) {\r\n        this.mainVideo = video;\r\n        this.adsPlayerContainer = adsPlayerContainer;\r\n        // Add <video> event listener\r\n        this.mainVideo.addEventListener('playing', this.onVideoPlayingListener);\r\n        this.mainVideo.addEventListener('timeupdate', this.onVideoTimeupdateListener);\r\n        this.mainVideo.addEventListener('seeking', this.onVideoTimeupdateListener);\r\n        this.mainVideo.addEventListener('ended', this.onVideoEndedListener);\r\n        // Add trigger end event listener\r\n        this.eventBus.addEventListener(EventBus_1.AdEvents.TRIGGER_END, this.onTriggerEndListener);\r\n    };\r\n    /**\r\n     * Load/open a MAST file.\r\n     * @method load\r\n     * @access public\r\n     * @memberof AdsPlayerController#\r\n     * @param {string} mastUrl - the MAST file url\r\n     * @param {number} startTime - the playback time before which triggers shall be ignored\r\n     */\r\n    AdsPlayerController.prototype.load = function (url, startTime) {\r\n        var _this = this;\r\n        var fileLoader = new FileLoader_1.FileLoader();\r\n        // Reset the MAST and trigger managers\r\n        this.mast = null;\r\n        this.triggerManagers = [];\r\n        // Download and parse MAST file\r\n        this.logger.debug('Download MAST file: ' + url);\r\n        return new Promise(function (resolve, reject) {\r\n            fileLoader.load(url).then(function (result) {\r\n                _this.logger.debug('Parse MAST file');\r\n                _this.parseMastFile(result['dom'], result['baseUrl'], startTime);\r\n                // Start managing triggers and ads playing\r\n                resolve(_this.start());\r\n            }).catch(function (error) {\r\n                if (error) {\r\n                    _this.errorHandler.sendError(error.name, error.data);\r\n                    reject(error);\r\n                }\r\n                else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n            _this.fileLoaders.push(fileLoader);\r\n        });\r\n    };\r\n    /**\r\n     * Stops and resets the Ads player.\r\n     * @method reset\r\n     * @access public\r\n     * @memberof AdsPlayerController#\r\n     */\r\n    AdsPlayerController.prototype.stop = function () {\r\n        this.logger.debug('Stop');\r\n        // Stop/abort the file loaders\r\n        for (var i = 0; i < this.fileLoaders.length; i++) {\r\n            this.fileLoaders[i].abort();\r\n        }\r\n        this.fileLoaders = [];\r\n        // Stop the VAST player manager\r\n        if (this.vastPlayerManager) {\r\n            this.vastPlayerManager.stop();\r\n            this.vastPlayerManager = null;\r\n            // Notifies the application ad(s) playback has ended\r\n            // this.eventBus.dispatchEvent(EventTypes.END);\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.reset = function () {\r\n        this.logger.debug('Reset');\r\n        this.stop();\r\n        // Reset the trigger managers\r\n        this.triggerManagers = [];\r\n        // Reset the MAST\r\n        this.mast = null;\r\n    };\r\n    AdsPlayerController.prototype.destroy = function () {\r\n        this.logger.debug('Destroy');\r\n        this.reset();\r\n        // Remove <video> event listener\r\n        this.mainVideo.removeEventListener('playing', this.onVideoPlayingListener);\r\n        this.mainVideo.removeEventListener('timeupdate', this.onVideoTimeupdateListener);\r\n        this.mainVideo.removeEventListener('seeking', this.onVideoTimeupdateListener);\r\n        this.mainVideo.removeEventListener('ended', this.onVideoEndedListener);\r\n        // Remove trigger end event listener\r\n        this.eventBus.removeEventListener('triggerEnd', this.onTriggerEndListener);\r\n    };\r\n    /**\r\n     * Plays/resumes the playback of the current ad.\r\n     * @method reset\r\n     * @access public\r\n     * @memberof AdsPlayerController#\r\n     */\r\n    AdsPlayerController.prototype.play = function () {\r\n        this.logger.debug('Play');\r\n        // Start the VAST player manager\r\n        if (this.vastPlayerManager) {\r\n            this.vastPlayerManager.play();\r\n        }\r\n    };\r\n    /**\r\n     * Pauses the playback of the current ad.\r\n     * @method reset\r\n     * @access public\r\n     * @memberof AdsPlayerController#\r\n     */\r\n    AdsPlayerController.prototype.pause = function () {\r\n        this.logger.debug('Pause');\r\n        // Pause the VAST player manager\r\n        if (this.vastPlayerManager) {\r\n            this.vastPlayerManager.pause();\r\n        }\r\n    };\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    AdsPlayerController.prototype.loadVast = function (url) {\r\n        var _this = this;\r\n        var fileLoader = new FileLoader_1.FileLoader(), vast = null;\r\n        return new Promise(function (resolve /*, reject*/) {\r\n            _this.logger.debug('Download VAST file: ' + url);\r\n            fileLoader.load(url).then(function (result) {\r\n                _this.logger.debug('Parse VAST file');\r\n                vast = _this.vastParser.parse(result['dom']);\r\n                vast.baseUrl = result['baseUrl'];\r\n                resolve(vast);\r\n            }).catch(function (error) {\r\n                if (error) {\r\n                    _this.errorHandler.sendError(error.name, error.data);\r\n                }\r\n                resolve(null);\r\n            });\r\n            _this.fileLoaders.push(fileLoader);\r\n        });\r\n    };\r\n    AdsPlayerController.prototype.loadTriggerVasts = function (trigger) {\r\n        var loadVastPromises = [];\r\n        for (var i = 0; i < trigger.sources.length; i++) {\r\n            var uri = trigger.sources[i].uri;\r\n            // Check for relative uri path and add base url if needed\r\n            uri = utils_1.Utils.isAbsoluteURI(uri) ? uri : (this.mast.baseUrl + uri);\r\n            loadVastPromises.push(this.loadVast(uri));\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            Promise.all(loadVastPromises).then(function (vasts) {\r\n                // Push vast objects in the trigger in the original order\r\n                // (this = promises returned objects)\r\n                for (var i = 0; i < vasts.length; i++) {\r\n                    if (vasts[i] && vasts[i].ads && vasts[i].ads.length > 0) {\r\n                        trigger.vasts.push(vasts[i]);\r\n                    }\r\n                }\r\n                resolve();\r\n            }).catch(function () {\r\n                reject();\r\n            });\r\n        });\r\n    };\r\n    AdsPlayerController.prototype.parseMastFile = function (mastContent, mastBaseUrl, startTime) {\r\n        var triggerManager;\r\n        // Parse the MAST file\r\n        this.mast = this.mastParser.parse(mastContent);\r\n        if (!this.mast) {\r\n            return;\r\n        }\r\n        // Store base URL for subsequent VAST files download\r\n        this.mast.baseUrl = mastBaseUrl;\r\n        // Filter the triggers\r\n        if (this.config.filterTriggersFn) {\r\n            try {\r\n                this.mast.triggers = this.config.filterTriggersFn(this.mast.triggers);\r\n            }\r\n            catch (e) {\r\n                this.logger.error('Failed to filter triggers');\r\n            }\r\n        }\r\n        // Initialize the trigger managers\r\n        for (var i = 0; i < this.mast.triggers.length; i++) {\r\n            triggerManager = new TriggerManager_1.TriggerManager();\r\n            triggerManager.init(this.mast.triggers[i], startTime);\r\n            this.triggerManagers.push(triggerManager);\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.onVideoPlaying = function () {\r\n        if (this.config.handleMainPlayerPlayback && this.vastPlayerManager) {\r\n            this.logger.debug('Pause main video');\r\n            this.mainVideo.pause();\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.onVideoTimeupdate = function () {\r\n        // Check for mid-roll triggers\r\n        var trigger = this.checkTriggersStart();\r\n        if (trigger !== null) {\r\n            this.activateTrigger(trigger, true);\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.onVideoEnded = function () {\r\n        // Check for end-roll triggers\r\n        var trigger = this.checkTriggersStart();\r\n        if (trigger !== null) {\r\n            this.activateTrigger(trigger, true);\r\n        }\r\n        this.checkTriggersEnd();\r\n    };\r\n    AdsPlayerController.prototype.pauseVideo = function () {\r\n        if (this.config.handleMainPlayerPlayback && this.mainVideo && !this.mainVideo.paused) {\r\n            this.logger.debug('Pause main video');\r\n            this.mainVideo.pause();\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.resumeVideo = function () {\r\n        if (this.config.handleMainPlayerPlayback && this.mainVideo && this.mainVideo.paused) {\r\n            this.logger.debug('Resume main video');\r\n            this.mainVideo.play();\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.onTriggerEnd = function () {\r\n        this.logger.debug('End playing trigger');\r\n        // Delete VAST player manager\r\n        if (this.vastPlayerManager) {\r\n            this.vastPlayerManager = null;\r\n        }\r\n        this.currentTrigger = null;\r\n        // Check if another trigger has to be activated\r\n        var trigger = this.checkTriggersStart();\r\n        if (trigger !== null) {\r\n            this.activateTrigger(trigger, false);\r\n        }\r\n        else {\r\n            // Notifies the application ad(s) playback has ended\r\n            this.eventBus.dispatchEvent(Events_1.EventTypes.END);\r\n            if (!this.mainVideo.ended) {\r\n                // Resume the main video element\r\n                this.resumeVideo();\r\n            }\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.playTrigger = function (trigger, firstTrigger) {\r\n        if (trigger.vasts.length === 0) {\r\n            this.onTriggerEnd();\r\n            return;\r\n        }\r\n        // Pause the main video element\r\n        this.pauseVideo();\r\n        // Play the trigger\r\n        this.logger.debug('Start playing trigger ' + trigger.id);\r\n        this.vastPlayerManager = new VastPlayerManager_1.VastPlayerManager(this.eventBus);\r\n        this.vastPlayerManager.init(trigger.vasts, this.adsPlayerContainer, this.mainVideo);\r\n        if (firstTrigger) {\r\n            // Notifies the application ad(s) playback starts\r\n            this.eventBus.dispatchEvent(Events_1.EventTypes.START, {\r\n                id: trigger.id,\r\n                duration: this.vastPlayerManager.getVastsDuration(),\r\n                currentTime: this.mainVideo.currentTime,\r\n                ended: this.mainVideo.ended\r\n            });\r\n        }\r\n        this.vastPlayerManager.start();\r\n    };\r\n    AdsPlayerController.prototype.activateTrigger = function (trigger, firstTrigger) {\r\n        var _this = this;\r\n        // Check if a trigger is not already activated\r\n        if (this.currentTrigger) {\r\n            return;\r\n        }\r\n        this.logger.debug('Activate trigger ' + trigger.id);\r\n        this.currentTrigger = trigger;\r\n        trigger.activated = true;\r\n        if (trigger.vasts.length === 0) {\r\n            // Download VAST files\r\n            this.loadTriggerVasts(trigger).then(function () {\r\n                _this.playTrigger(trigger, firstTrigger);\r\n            });\r\n        }\r\n        else {\r\n            this.playTrigger(trigger, firstTrigger);\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.checkTriggersStart = function () {\r\n        for (var i = 0; i < this.triggerManagers.length; i++) {\r\n            if (this.triggerManagers[i].checkStartConditions(this.mainVideo)) {\r\n                return this.triggerManagers[i].getTrigger();\r\n            }\r\n            else if (this.triggerManagers[i].getIsSkipped()) {\r\n                // Remove triggers that are skipped since trigger time is anterior to provided stream start tileme\r\n                this.triggerManagers.splice(0, 1);\r\n                i--;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    AdsPlayerController.prototype.checkTriggersEnd = function () {\r\n        for (var i = 0; i < this.triggerManagers.length; i++) {\r\n            if (this.triggerManagers[i].checkEndConditions(this.mainVideo)) {\r\n                // Remove trigger manager => will not be activated anymore\r\n                this.triggerManagers.splice(0, 1);\r\n                i--;\r\n            }\r\n        }\r\n    };\r\n    AdsPlayerController.prototype.start = function () {\r\n        if (!this.mast) {\r\n            return;\r\n        }\r\n        this.logger.debug('Start');\r\n        if (this.mast.triggers.length === 0) {\r\n            this.logger.warn('No trigger in MAST');\r\n        }\r\n        // Check for pre-roll trigger\r\n        var trigger = this.checkTriggersStart();\r\n        if (trigger !== null) {\r\n            this.activateTrigger(trigger, true);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return AdsPlayerController;\r\n}());\r\nexports.AdsPlayerController = AdsPlayerController;\r\nexports.default = AdsPlayerController;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* File downloader utility class.\r\n*/\r\nvar Errors_1 = __webpack_require__(5);\r\nvar FileLoader = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function FileLoader() {\r\n        this.request = null;\r\n        this.url = '';\r\n        this.baseUrl = '';\r\n        this.aborted = false;\r\n        this.needFailureReport = true;\r\n    }\r\n    FileLoader.prototype.load = function (url) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.load_(url, resolve, reject);\r\n        });\r\n    };\r\n    FileLoader.prototype.abort = function () {\r\n        this.abort_();\r\n    };\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    FileLoader.prototype.parseBaseUrl = function (url) {\r\n        var base = null;\r\n        if (url.indexOf('/') !== -1) {\r\n            if (url.indexOf('?') !== -1) {\r\n                url = url.substring(0, url.indexOf('?'));\r\n            }\r\n            base = url.substring(0, url.lastIndexOf('/') + 1);\r\n        }\r\n        return base;\r\n    };\r\n    FileLoader.prototype.parseXml = function (data) {\r\n        if (!DOMParser) {\r\n            return null;\r\n        }\r\n        try {\r\n            var parser = new DOMParser();\r\n            var xmlDoc = parser.parseFromString(data, 'text/xml');\r\n            if (xmlDoc.getElementsByTagName('parsererror').length > 0) {\r\n                throw new Error('Error parsing XML');\r\n            }\r\n            return xmlDoc;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    FileLoader.prototype.load_ = function (url, resolve, reject) {\r\n        var _this = this;\r\n        this.url = url;\r\n        this.baseUrl = this.parseBaseUrl(url);\r\n        this.request = new XMLHttpRequest();\r\n        this.request.onload = function (evt) {\r\n            _this.onLoad(resolve, reject);\r\n        };\r\n        this.request.onloadend = function (evt) {\r\n            _this.onLoadend(resolve, reject);\r\n        };\r\n        this.request.onerror = function (evt) {\r\n            _this.onLoadend(resolve, reject);\r\n        };\r\n        this.request.onabort = function (evt) {\r\n            _this.onAbort();\r\n        };\r\n        this.request.open('GET', url, true);\r\n        this.request.timeout = 10000;\r\n        this.request.send();\r\n    };\r\n    FileLoader.prototype.onAbort = function () {\r\n        this.aborted = true;\r\n    };\r\n    FileLoader.prototype.onLoad = function (resolve, reject) {\r\n        if (this.request.status < 200 || this.request.status > 299) {\r\n            return;\r\n        }\r\n        if (this.request.status === 200 && this.request.readyState === 4) {\r\n            // Parse responseText in case of wrong response Content-Type\r\n            var xmlDoc = this.request.responseXML || this.parseXml(this.request.responseText);\r\n            // Check if response is in XML format.\r\n            if (xmlDoc === null) {\r\n                this.needFailureReport = true;\r\n                return;\r\n            }\r\n            // Get the redirection URL and use it as base URL\r\n            if (this.request.responseURL) {\r\n                this.baseUrl = this.parseBaseUrl(this.request.responseURL);\r\n            }\r\n            this.needFailureReport = false;\r\n            // Return XML DOM (as input to parsers)\r\n            resolve({\r\n                dom: xmlDoc,\r\n                baseUrl: this.baseUrl\r\n            });\r\n        }\r\n    };\r\n    FileLoader.prototype.onLoadend = function (resolve, reject) {\r\n        if (!this.needFailureReport) {\r\n            return;\r\n        }\r\n        this.needFailureReport = false;\r\n        if (this.aborted) {\r\n            // Request has been aborted => reject without error\r\n            reject();\r\n        }\r\n        else if (this.request.status < 200 || this.request.status > 299) {\r\n            // Request has failed => reject with error\r\n            reject({\r\n                name: Errors_1.ErrorCodes.DOWNLOAD_ERR_FILE,\r\n                data: {\r\n                    url: this.url,\r\n                    status: this.request.status\r\n                }\r\n            });\r\n        }\r\n        else if (this.request.responseXML === null) {\r\n            // Response was not in XML format => reject with error\r\n            reject({\r\n                name: Errors_1.ErrorCodes.DOWNLOAD_ERR_NOT_XML,\r\n                data: {\r\n                    url: this.url\r\n                }\r\n            });\r\n        }\r\n    };\r\n    FileLoader.prototype.abort_ = function () {\r\n        if (this.request !== null &&\r\n            this.request.readyState > 0 &&\r\n            this.request.readyState < 4) {\r\n            this.request.abort();\r\n        }\r\n    };\r\n    return FileLoader;\r\n}());\r\nexports.FileLoader = FileLoader;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Errors and warning notifications handler.\r\n*/\r\nvar Logger_1 = __webpack_require__(0);\r\nvar Errors_1 = __webpack_require__(5);\r\nvar Events_1 = __webpack_require__(1);\r\nvar ErrorHandler = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function ErrorHandler(eventBus) {\r\n        this.logger = Logger_1.Logger.getInstance();\r\n        this.eventBus = eventBus;\r\n    }\r\n    ErrorHandler.prototype.sendError = function (code, data) {\r\n        var message = Errors_1.ErrorMessages[code];\r\n        this.logger.error('[Error] Code: ' + code + ', Message: ' + message + ', Data: ' + JSON.stringify(data, null, '\\t'));\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.ERROR, {\r\n            code: code,\r\n            message: message,\r\n            data: data\r\n        });\r\n    };\r\n    return ErrorHandler;\r\n}());\r\nexports.ErrorHandler = ErrorHandler;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZHNwbGF5ZXIvLi9zcmMvbGliL0Vycm9ySGFuZGxlci50cz8yN2E5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkJFOztBQUVGOztFQUVFO0FBRUYsc0NBQWtDO0FBRWxDLHNDQUFzRDtBQUN0RCxzQ0FBdUM7QUFFdkM7SUFRSSxxQkFBcUI7SUFDckIscURBQXFEO0lBRXJELDJCQUEyQjtJQUMzQixxREFBcUQ7SUFFckQsc0JBQWEsUUFBUTtRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLGVBQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUFXLElBQWdCLEVBQUUsSUFBWTtRQUNyQyxJQUFJLE9BQU8sR0FBRyxzQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLElBQUksR0FBRyxhQUFhLEdBQUcsT0FBTyxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNySCxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxtQkFBVSxDQUFDLEtBQUssRUFBRTtZQUMxQyxJQUFJLEVBQUUsSUFBSTtZQUNWLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUlMLG1CQUFDO0FBQUQsQ0FBQztBQS9CWSxvQ0FBWSIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiogVGhlIGNvcHlyaWdodCBpbiB0aGlzIHNvZnR3YXJlIG1vZHVsZSBpcyBiZWluZyBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UsIGluY2x1ZGVkXHJcbiogYmVsb3cuIFRoaXMgc29mdHdhcmUgbW9kdWxlIG1heSBiZSBzdWJqZWN0IHRvIG90aGVyIHRoaXJkIHBhcnR5IGFuZC9vciBjb250cmlidXRvciByaWdodHMsXHJcbiogaW5jbHVkaW5nIHBhdGVudCByaWdodHMsIGFuZCBubyBzdWNoIHJpZ2h0cyBhcmUgZ3JhbnRlZCB1bmRlciB0aGlzIGxpY2Vuc2UuXHJcbipcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTYsIE9yYW5nZVxyXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbipcclxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkXHJcbiogcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuKiAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnNcclxuKiAgIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbiogLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxyXG4qICAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcclxuKiAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuKiAtIE5laXRoZXIgdGhlIG5hbWUgb2YgT3JhbmdlIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcclxuKiAgIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIG1vZHVsZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuKlxyXG4qXHJcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyDigJxBUyBJU+KAnSBBTkQgQU5ZIEVYUFJFU1MgT1JcclxuKiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcclxuKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1xyXG4qIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcclxuKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXHJcbiogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXHJcbiogV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWVxyXG4qIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4qL1xyXG5cclxuLyoqXHJcbiogRXJyb3JzIGFuZCB3YXJuaW5nIG5vdGlmaWNhdGlvbnMgaGFuZGxlci5cclxuKi9cclxuXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vTG9nZ2VyJztcclxuaW1wb3J0IHsgRXZlbnRCdXMgfSBmcm9tICcuL0V2ZW50QnVzJztcclxuaW1wb3J0IHsgRXJyb3JDb2RlcywgRXJyb3JNZXNzYWdlcyB9IGZyb20gJy4uL0Vycm9ycyc7XHJcbmltcG9ydCB7IEV2ZW50VHlwZXMgfSBmcm9tICcuLi9FdmVudHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlciB7XHJcblxyXG4gICAgLy8gI3JlZ2lvbiBNRU1CRVJTXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIHByaXZhdGUgbG9nZ2VyOiBMb2dnZXI7XHJcbiAgICBwcml2YXRlIGV2ZW50QnVzOiBFdmVudEJ1cztcclxuXHJcbiAgICAvLyAjZW5kcmVnaW9uIE1FTUJFUlNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8gI3JlZ2lvbiBQVUJMSUMgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIGNvbnN0cnVjdG9yIChldmVudEJ1cykge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdGhpcy5ldmVudEJ1cyA9IGV2ZW50QnVzO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbmRFcnJvciAoY29kZTogRXJyb3JDb2RlcywgZGF0YTogb2JqZWN0KSB7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBFcnJvck1lc3NhZ2VzW2NvZGVdO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdbRXJyb3JdIENvZGU6ICcgKyBjb2RlICsgJywgTWVzc2FnZTogJyArIG1lc3NhZ2UgKyAnLCBEYXRhOiAnICsgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgJ1xcdCcpKTtcclxuICAgICAgICB0aGlzLmV2ZW50QnVzLmRpc3BhdGNoRXZlbnQoRXZlbnRUeXBlcy5FUlJPUiwge1xyXG4gICAgICAgICAgICBjb2RlOiBjb2RlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvbiBQVUJMSUMgRlVOQ1RJT05TXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* MAST parser. This class parses MAST file in XML format\r\n* and construct the corresponding MAST object according to MAST data model.\r\n*/\r\nvar mast = __webpack_require__(6);\r\nvar xmldom_1 = __webpack_require__(7);\r\nvar MastParser = /** @class */ (function () {\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function MastParser() {\r\n    }\r\n    /**\r\n    * Parses the MAST xml file and get the triggers.\r\n    * @param {object} xmlDom - the XML DOM to parse\r\n    */\r\n    MastParser.prototype.parse = function (xmlDom) {\r\n        var _mast = new mast.Mast(), mastNode = xmldom_1.XmlDom.getElement(xmlDom, 'MAST');\r\n        if (mastNode === null) {\r\n            return _mast;\r\n        }\r\n        this.getTriggers(mastNode, _mast);\r\n        return _mast;\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------    \r\n    MastParser.prototype.getCondition = function (conditionNode) {\r\n        var condition = new mast.Condition(), conditionNodes;\r\n        condition.type = conditionNode.getAttribute('type');\r\n        condition.name = conditionNode.getAttribute('name');\r\n        condition.value = conditionNode.getAttribute('value');\r\n        condition.operator = conditionNode.getAttribute('operator');\r\n        conditionNodes = conditionNode.getElementsByTagName('condition');\r\n        for (var i = 0; i < conditionNodes.length; i++) {\r\n            condition.conditions.push(this.getCondition(conditionNodes[i]));\r\n        }\r\n        return condition;\r\n    };\r\n    MastParser.prototype.getSource = function (sourceNode) {\r\n        var source = new mast.Source(), sourceNodes;\r\n        source.uri = sourceNode.getAttribute('uri');\r\n        source.altReference = sourceNode.getAttribute('altReference');\r\n        source.format = sourceNode.getAttribute('format');\r\n        sourceNodes = sourceNode.getElementsByTagName('source');\r\n        for (var i = 0; i < sourceNodes.length; i++) {\r\n            source.sources.push(this.getSource(sourceNodes[i]));\r\n        }\r\n        return source;\r\n    };\r\n    MastParser.prototype.getTrigger = function (triggerNode) {\r\n        var trigger = new mast.Trigger(), startConditionNodes = xmldom_1.XmlDom.getSubElements(triggerNode, 'startConditions', 'condition'), endConditionNodes = xmldom_1.XmlDom.getSubElements(triggerNode, 'endConditions', 'condition'), sourceNodes = xmldom_1.XmlDom.getSubElements(triggerNode, 'sources', 'source');\r\n        trigger.id = triggerNode.getAttribute('id');\r\n        trigger.description = triggerNode.getAttribute('description');\r\n        for (var i = 0; i < startConditionNodes.length; i++) {\r\n            trigger.startConditions.push(this.getCondition(startConditionNodes[i]));\r\n        }\r\n        for (var i = 0; i < endConditionNodes.length; i++) {\r\n            trigger.endConditions.push(this.getCondition(endConditionNodes[i]));\r\n        }\r\n        for (var i = 0; i < sourceNodes.length; i++) {\r\n            trigger.sources.push(this.getSource(sourceNodes[i]));\r\n        }\r\n        return trigger;\r\n    };\r\n    MastParser.prototype.getTriggers = function (mastNode, mast) {\r\n        var triggerNodes = xmldom_1.XmlDom.getSubElements(mastNode, 'triggers', 'trigger');\r\n        for (var i = 0; i < triggerNodes.length; i++) {\r\n            mast.triggers.push(this.getTrigger(triggerNodes[i]));\r\n        }\r\n    };\r\n    return MastParser;\r\n}());\r\nexports.MastParser = MastParser;\r\nexports.default = MastParser;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n/**\r\n* The TriggerManager manages the detection of the start and end of a trigger.\r\n* It takes as input a trigger object (as parsed from a MAST file) and tests the start and end conditions\r\n* to detect the activation and revocation of a trigger.\r\n*/\r\nvar mast = __webpack_require__(6);\r\nvar utils_1 = __webpack_require__(2);\r\nvar TriggerManager = /** @class */ (function () {\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function TriggerManager() {\r\n        this.trigger = null;\r\n        this.startTime = -1;\r\n        this.isSkipped = false;\r\n    }\r\n    /**\r\n     * Initializes the TriggerManager.\r\n     * @method init\r\n     * @access public\r\n     * @memberof TriggerManager#\r\n     * @param {Trigger} trigger - the trigger to handle by this manager\r\n     * @param {number} startTime - the playback time before which triggers shall be ignored\r\n     */\r\n    TriggerManager.prototype.init = function (trigger, startTime) {\r\n        this.trigger = trigger;\r\n        this.startTime = !isNaN(startTime) ? startTime : -1;\r\n    };\r\n    /**\r\n     * Returns the trigger object managed by this TriggerManager.\r\n     * @method init\r\n     * @access public\r\n     * @memberof TriggerManager#\r\n     * @return {Object} the managed trigger object\r\n     */\r\n    TriggerManager.prototype.getTrigger = function () {\r\n        return this.trigger;\r\n    };\r\n    /**\r\n     * Evaluates the trigger start conditions.\r\n     * @method checkStartConditions\r\n     * @access public\r\n     * @memberof TriggerManager#\r\n     * @param {Number} video - the main video element\r\n     */\r\n    TriggerManager.prototype.checkStartConditions = function (video) {\r\n        if (this.trigger.activated) {\r\n            return false;\r\n        }\r\n        if (this.trigger.sources.length === 0) {\r\n            // no ads sources to play, do not activate this trigger\r\n            return false;\r\n        }\r\n        return this.evaluateConditions(this.trigger.startConditions, video);\r\n    };\r\n    /**\r\n     * Evaluates the trigger end conditions.\r\n     * @method checkEndConditions\r\n     * @access public\r\n     * @memberof TriggerManager#\r\n     * @param {Number} video - the main video element\r\n     */\r\n    TriggerManager.prototype.checkEndConditions = function (video) {\r\n        return this.evaluateConditions(this.trigger.endConditions, video);\r\n    };\r\n    /**\r\n     * Return true if trigger is skipped since trigger time is anterior to provided stream start time\r\n     * @return true if trigger is skipped since trigger time is anterior to provided stream start time\r\n     */\r\n    TriggerManager.prototype.getIsSkipped = function () {\r\n        return this.isSkipped;\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    TriggerManager.prototype.compareValues = function (value1, value2, operator) {\r\n        if (value1 < 0 || value2 < 0) {\r\n            return false;\r\n        }\r\n        var res = false;\r\n        switch (operator) {\r\n            case mast.CONDITION_OPERATOR.EQ:\r\n                res = (value1 === value2);\r\n                break;\r\n            case mast.CONDITION_OPERATOR.NEQ:\r\n                res = (value1 !== value2);\r\n                break;\r\n            case mast.CONDITION_OPERATOR.GTR:\r\n                res = (value1 > value2);\r\n                break;\r\n            case mast.CONDITION_OPERATOR.GEQ:\r\n                res = (value1 >= value2);\r\n                break;\r\n            case mast.CONDITION_OPERATOR.LT:\r\n                res = (value1 < value2);\r\n                break;\r\n            case mast.CONDITION_OPERATOR.LEQ:\r\n                res = (value1 <= value2);\r\n                break;\r\n            case mast.CONDITION_OPERATOR.MOD:\r\n                res = ((value1 % value2) === 0);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return res;\r\n    };\r\n    TriggerManager.prototype.evaluateCondition = function (condition, video) {\r\n        var res = false;\r\n        // Check pre-roll condition for activation\r\n        if (video.currentTime === 0 &&\r\n            condition.type === mast.CONDITION_TYPE.EVENT &&\r\n            condition.name === mast.CONDITION_NAME.ON_ITEM_START) {\r\n            res = true;\r\n            if (this.startTime > 0) {\r\n                res = false;\r\n                this.isSkipped = true;\r\n            }\r\n        }\r\n        // Check mid-roll condition for activation\r\n        if (condition.type === mast.CONDITION_TYPE.PROPERTY) {\r\n            var triggerTime = utils_1.Utils.parseTime(condition.value);\r\n            switch (condition.name) {\r\n                case mast.CONDITION_NAME.POSITION:\r\n                    // Check trigger time with stream start time if condition is relative to current position\r\n                    if (triggerTime < this.startTime) {\r\n                        res = false;\r\n                        this.isSkipped = true;\r\n                    }\r\n                    else {\r\n                        res = this.compareValues(video.currentTime, triggerTime, condition.operator);\r\n                    }\r\n                    break;\r\n                case mast.CONDITION_NAME.DURATION:\r\n                    res = this.compareValues(video.duration, triggerTime, condition.operator);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        // Check condition for revocation\r\n        if (video.ended && condition.type === mast.CONDITION_TYPE.EVENT && condition.name === mast.CONDITION_NAME.ON_ITEM_END) {\r\n            res = true;\r\n        }\r\n        // AND with sub-conditions\r\n        // MAST spec. : "Child conditions are treated as an implicit AND, all children of a condition must evaluate true before a trigger will fire (or be revoked) from that condition."\r\n        for (var i = 0; i < condition.conditions.length; i++) {\r\n            res = res && this.evaluateCondition(condition.conditions[i], video);\r\n        }\r\n        return res;\r\n    };\r\n    TriggerManager.prototype.evaluateConditions = function (conditions, video) {\r\n        var res = false;\r\n        // Evaluate each condition\r\n        // MAST spec. : "Multiple condition elements are treated as an implicit OR, any one of them evaluating true will fire the trigger."\r\n        for (var i = 0; i < conditions.length; i++) {\r\n            res = res || this.evaluateCondition(conditions[i], video);\r\n        }\r\n        return res;\r\n    };\r\n    return TriggerManager;\r\n}());\r\nexports.TriggerManager = TriggerManager;\r\nexports.default = TriggerManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* VAST parser. This class parses VAST file in XML format\r\n* and construct the corresponding VAST object according to VAST data model.\r\n*/\r\nvar vast = __webpack_require__(16);\r\nvar xmldom_1 = __webpack_require__(7);\r\nvar VastParser = /** @class */ (function () {\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function VastParser() {\r\n    }\r\n    /**\r\n    * Parses the VAST XML DOM and get the triggers.\r\n    * @param {object} xmlDom - the XML DOM to parse\r\n    */\r\n    VastParser.prototype.parse = function (xmlDom) {\r\n        var vast_ = new vast.Vast(), vastNode = xmldom_1.XmlDom.getElement(xmlDom, 'VAST');\r\n        if (vastNode === null) {\r\n            return vast_;\r\n        }\r\n        vast_.version = vastNode.getAttribute('version');\r\n        this.getAds(vastNode, vast_);\r\n        return vast_;\r\n    };\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------    \r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    VastParser.prototype.getTrackingEvent = function (trackingNode) {\r\n        var trackingEvent = new vast.TrackingEvent();\r\n        trackingEvent.event = trackingNode.getAttribute('event');\r\n        trackingEvent.uri = xmldom_1.XmlDom.getNodeTextValue(trackingNode);\r\n        if (trackingEvent.event == 'progress') {\r\n            var offsetValue = trackingNode.getAttribute('offset');\r\n            if (offsetValue.indexOf('%') == -1) {\r\n                /* convert HH:MM:SS ( or HH:MM:SS.mmm) in seconds */\r\n                trackingEvent.offsetInSeconds = new Date('1970-01-01T' + offsetValue + 'Z').getTime() / 1000;\r\n            }\r\n            else {\r\n                trackingEvent.offsetPercent = offsetValue.substring(0, offsetValue.indexOf('%')) / 100;\r\n            }\r\n        }\r\n        return trackingEvent;\r\n    };\r\n    VastParser.prototype.getVideoClicks = function (videoClicksNode) {\r\n        var videoClicks = new vast.VideoClicks(), nodeName, nodeValue;\r\n        for (var i = 0; i < videoClicksNode.childNodes.length; i++) {\r\n            nodeName = videoClicksNode.childNodes[i].nodeName;\r\n            nodeValue = xmldom_1.XmlDom.getNodeTextValue(videoClicksNode.childNodes[i]);\r\n            switch (nodeName) {\r\n                case 'ClickThrough':\r\n                    videoClicks.clickThrough = nodeValue;\r\n                    break;\r\n                case 'ClickTracking':\r\n                    videoClicks.clickTracking = nodeValue;\r\n                    break;\r\n                case 'CustomClick':\r\n                    videoClicks.customClick = nodeValue;\r\n                    break;\r\n            }\r\n        }\r\n        return videoClicks;\r\n    };\r\n    VastParser.prototype.getMediaFile = function (mediaFileNode) {\r\n        var mediaFile = new vast.MediaFile();\r\n        mediaFile.id = mediaFileNode.getAttribute('id');\r\n        mediaFile.delivery = mediaFileNode.getAttribute('delivery');\r\n        mediaFile.type = mediaFileNode.getAttribute('type');\r\n        mediaFile.bitrate = mediaFileNode.getAttribute('bitrate');\r\n        mediaFile.width = mediaFileNode.getAttribute('width');\r\n        mediaFile.height = mediaFileNode.getAttribute('height');\r\n        mediaFile.scalable = mediaFileNode.getAttribute('scalable');\r\n        mediaFile.maintainAspectRatio = mediaFileNode.getAttribute('maintainAspectRatio');\r\n        mediaFile.apiFramework = mediaFileNode.getAttribute('apiFramework');\r\n        mediaFile.uri = xmldom_1.XmlDom.getNodeTextValue(mediaFileNode);\r\n        return mediaFile;\r\n    };\r\n    VastParser.prototype.getLinear = function (linearNode) {\r\n        var linear = new vast.Linear(), trackingNodes, videoClicksNode, mediaFileNodes;\r\n        linear.duration = xmldom_1.XmlDom.getChildNodeTextValue(linearNode, 'Duration');\r\n        linear.adParameters = xmldom_1.XmlDom.getChildNodeTextValue(linearNode, 'AdParameters');\r\n        trackingNodes = xmldom_1.XmlDom.getSubElements(linearNode, 'TrackingEvents', 'Tracking');\r\n        for (var i = 0; i < trackingNodes.length; i++) {\r\n            linear.trackingEvents.push(this.getTrackingEvent(trackingNodes[i]));\r\n        }\r\n        videoClicksNode = xmldom_1.XmlDom.getElement(linearNode, 'VideoClicks');\r\n        if (videoClicksNode) {\r\n            linear.videoClicks = this.getVideoClicks(videoClicksNode);\r\n        }\r\n        mediaFileNodes = xmldom_1.XmlDom.getSubElements(linearNode, 'MediaFiles', 'MediaFile');\r\n        for (var i = 0; i < mediaFileNodes.length; i++) {\r\n            linear.mediaFiles.push(this.getMediaFile(mediaFileNodes[i]));\r\n        }\r\n        return linear;\r\n    };\r\n    VastParser.prototype.getCreative = function (creativeNode) {\r\n        var creative = new vast.Creative(), linearNode;\r\n        creative.id = creativeNode.getAttribute('id');\r\n        creative.adId = creativeNode.getAttribute('AdID');\r\n        creative.sequence = creativeNode.getAttribute('sequence');\r\n        linearNode = xmldom_1.XmlDom.getElement(creativeNode, 'Linear');\r\n        if (linearNode) {\r\n            creative.linear = this.getLinear(linearNode);\r\n        }\r\n        // TODO: get Companion and non-Linear elements\r\n        return creative;\r\n    };\r\n    VastParser.prototype.getInLine = function (adNode) {\r\n        var inLine = new vast.InLine(), inLineNode = xmldom_1.XmlDom.getElement(adNode, 'InLine'), impressionNodes, creativeNodes;\r\n        if (inLineNode === null) {\r\n            return null;\r\n        }\r\n        inLine.adSystem = xmldom_1.XmlDom.getChildNodeTextValue(inLineNode, 'AdSystem');\r\n        inLine.adTitle = xmldom_1.XmlDom.getChildNodeTextValue(inLineNode, 'AdTitle');\r\n        inLine.description = xmldom_1.XmlDom.getChildNodeTextValue(inLineNode, 'Description');\r\n        inLine.survey = xmldom_1.XmlDom.getChildNodeTextValue(inLineNode, 'Survey');\r\n        inLine.error = xmldom_1.XmlDom.getChildNodeTextValue(inLineNode, 'Error');\r\n        impressionNodes = xmldom_1.XmlDom.getElements(inLineNode, 'Impression');\r\n        for (var i = 0; i < impressionNodes.length; i++) {\r\n            var impression = new vast.Impression();\r\n            impression.id = impressionNodes[i].getAttribute('id');\r\n            impression.uri = xmldom_1.XmlDom.getNodeTextValue(impressionNodes[i]);\r\n            inLine.impressions.push(impression);\r\n        }\r\n        creativeNodes = xmldom_1.XmlDom.getSubElements(inLineNode, 'Creatives', 'Creative');\r\n        for (var i = 0; i < creativeNodes.length; i++) {\r\n            inLine.creatives.push(this.getCreative(creativeNodes[i]));\r\n        }\r\n        return inLine;\r\n    };\r\n    VastParser.prototype.getAd = function (adNode) {\r\n        var ad = new vast.Ad();\r\n        ad.id = adNode.getAttribute('id');\r\n        ad.sequence = adNode.getAttribute('sequence');\r\n        ad.inLine = this.getInLine(adNode);\r\n        return ad;\r\n    };\r\n    VastParser.prototype.getAds = function (vastNode, vast_) {\r\n        var adNodes = xmldom_1.XmlDom.getElements(vastNode, 'Ad');\r\n        for (var i = 0; i < adNodes.length; i++) {\r\n            vast_.ads.push(this.getAd(adNodes[i]));\r\n        }\r\n    };\r\n    return VastParser;\r\n}());\r\nexports.VastParser = VastParser;\r\nexports.default = VastParser;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* @class Vast\r\n* @ignore\r\n*/\r\nvar Vast = /** @class */ (function () {\r\n    function Vast() {\r\n        this.version = '';\r\n        this.ads = [];\r\n        this.baseUrl = '';\r\n    }\r\n    return Vast;\r\n}());\r\nexports.Vast = Vast;\r\n/**\r\n* @class Ad\r\n* @ignore\r\n*/\r\nvar Ad = /** @class */ (function () {\r\n    function Ad() {\r\n        this.id = ''; // [Optional] an ad server-defined string for the ad\r\n        this.sequence = 0; // [Optional] the sequence in which an ad should play\r\n        this.inLine = null;\r\n        this.wrapper = null;\r\n    }\r\n    return Ad;\r\n}());\r\nexports.Ad = Ad;\r\n/**\r\n* @class InLine\r\n* @ignore\r\n*/\r\nvar InLine = /** @class */ (function () {\r\n    function InLine() {\r\n        this.adSystem = ''; // [Required] Source ad server\r\n        this.adTitle = ''; // [Required] Title\r\n        this.description = ''; // [Optional] Description\r\n        this.survey = ''; // [Optional] URI of request to survey vendor\r\n        this.error = ''; // [Optional] URI to request if ad does not play due to error\r\n        this.impressions = []; // [Required] URIs to track impressions.\r\n        this.creatives = []; // [Required] Creative elements\r\n        this.extensions = []; // [Optional] Any valid XML may be included in the Extensions node\r\n    }\r\n    return InLine;\r\n}());\r\nexports.InLine = InLine;\r\n/**\r\n* @class Impression\r\n* @ignore\r\n*/\r\nvar Impression = /** @class */ (function () {\r\n    function Impression() {\r\n        this.uri = ''; // [Required] URI to track Impression\r\n        this.id = ''; // [Optional] Identifier\r\n    }\r\n    return Impression;\r\n}());\r\nexports.Impression = Impression;\r\n/**\r\n* @class Extensions\r\n* @ignore\r\n*/\r\nvar Extensions = /** @class */ (function () {\r\n    function Extensions() {\r\n        this.uri = ''; //\r\n        this.other = ''; //\r\n    }\r\n    return Extensions;\r\n}());\r\nexports.Extensions = Extensions;\r\n/**\r\n* @class Creative\r\n* @ignore\r\n*/\r\nvar Creative = /** @class */ (function () {\r\n    function Creative() {\r\n        this.id = ''; // [Optional] Identifier\r\n        this.adId = ''; // [Optional] Ad-ID for the creative (formerly ISCI)\r\n        this.sequence = 0; // [Optional] The preferred order in which multiple Creatives should be displayed\r\n        this.linear = null; // [Optional] Linear ad\r\n        this.CompanionAds = []; // [Optional] Companion ads\r\n        this.nonLinearAds = []; // [Optional] Non-linear ads\r\n    }\r\n    return Creative;\r\n}());\r\nexports.Creative = Creative;\r\n// Creative types\r\nvar CREATIVE_TYPE;\r\n(function (CREATIVE_TYPE) {\r\n    CREATIVE_TYPE[\"LINEAR\"] = \"linear\";\r\n    CREATIVE_TYPE[\"NON_LINEAR_ADS\"] = \"NonLinearAds\";\r\n    CREATIVE_TYPE[\"COMPANION_ADS\"] = \"CompanionAds\";\r\n})(CREATIVE_TYPE = exports.CREATIVE_TYPE || (exports.CREATIVE_TYPE = {}));\r\n;\r\n/**\r\n* @class Linear\r\n* @ignore\r\n*/\r\nvar Linear = /** @class */ (function () {\r\n    function Linear() {\r\n        this.duration = ''; // [Required] Duration in standard time format, hh:mm:ss\r\n        this.trackingEvents = []; // [Optional] Tracking events elements\r\n        this.adParameters = ''; // [Optional] Data to be passed into the video ad\r\n        this.videoClicks = null; // [Optional] Video clicks\r\n        this.mediaFiles = []; // [Required] Media file elements\r\n    }\r\n    return Linear;\r\n}());\r\nexports.Linear = Linear;\r\n/**\r\n* @class Companion\r\n* @ignore\r\n*/\r\nvar Companion = /** @class */ (function () {\r\n    function Companion() {\r\n        this.id = ''; // optional : identifier\r\n        this.width = 0; // width pixel dimension of companion\r\n        this.height = 0; // height pixel dimension of companion\r\n        this.staticResource = null; // optional : pointer to the static resource : AdsPlayer.vast.model.Ad.StaticResource\r\n        this.iFrameResource = ''; // optional : URI source for an IFrame to display the companion element\r\n        this.hTMLResource = ''; // optional : HTML to display the companion element : shall be CDATA value\r\n        this.trackingEvents = []; // optional : pointer to any number of tracking objects : AdsPlayer.vast.model.Ad.CompanionTracking\r\n        this.clickThrough = ''; // optional : URI to open as destination page when user clicks on the companion\r\n        this.altText = ''; // optional : alt text to be displayed when companion is rendered in HTML environment.\r\n        this.adParameters = ''; // optional : data to be passed into the companion ads\r\n    }\r\n    return Companion;\r\n}());\r\nexports.Companion = Companion;\r\n//\r\n//      Non Linear Ads\r\n//\r\n/**\r\n* @class Companion\r\n* @ignore\r\n*/\r\nvar NonLinear = /** @class */ (function () {\r\n    function NonLinear() {\r\n        this.id = ''; // optional : identifier\r\n        this.width = 0; // width pixel dimension of non linear\r\n        this.height = 0; // height pixel dimension of non linear\r\n        this.expandedWidth = 0; // optional : pixel dimensions of expanding nonlinear ad when in expanded state\r\n        this.expandedHeight = 0; // optional : pixel dimensions of expanding nonlinear ad when in expanded state\r\n        this.scalable = true; // optional : whether it is acceptable to scale the image\r\n        this.maintainAspectRatio = true; // optional : whether the ad must have its aspect ratio maintained when scaled\r\n        this.apiFramework = ''; // optional : defines the method to use for communication with the nonlinear element\r\n        this.staticResource = null; // optional : pointer to the static resource : AdsPlayer.vast.model.Ad.StaticResource\r\n        this.hTMLResource = ''; // optional : HTML to display the companion element : shall be CDATA value\r\n        this.trackingEvents = []; // optional : pointer to any number of tracking objects : AdsPlayer.vast.model.Ad.Tracking\r\n        this.clickThrough = ''; // optional : URI to open as destination page when user clicks on the non-linear ad unit\r\n        this.adParameters = ''; // optional : data to be passed into the video ad\r\n    }\r\n    return NonLinear;\r\n}());\r\nexports.NonLinear = NonLinear;\r\n/**\r\n* @class TrackingEvent\r\n* @ignore\r\n*/\r\nvar TrackingEvent = /** @class */ (function () {\r\n    function TrackingEvent() {\r\n        this.uri = ''; // [Optional] URI to track various events during playback\r\n        this.event = ''; // [Required] The name of the event to track for the Linear element\r\n        this.offsetInSeconds = 0; // [Optional] Required in 'Progess' event, not use with other events\r\n        this.offsetPercent = 0; // [Optional] Required in 'Progess' event, not use with other events\r\n        this.oneShot = true; // Used by TrackingEventsManager\r\n        this.completed = false; // Used by TrackingEventsManager\r\n    }\r\n    return TrackingEvent;\r\n}());\r\nexports.TrackingEvent = TrackingEvent;\r\n/**\r\n* [TrackingEvent description]\r\n* @type {Object}\r\n*/\r\nvar TRACKINGEVENT_TYPE;\r\n(function (TRACKINGEVENT_TYPE) {\r\n    TRACKINGEVENT_TYPE[\"CREATIVEVIEW\"] = \"creativeView\";\r\n    TRACKINGEVENT_TYPE[\"START\"] = \"start\";\r\n    TRACKINGEVENT_TYPE[\"MIDPOINT\"] = \"midpoint\";\r\n    TRACKINGEVENT_TYPE[\"FIRSTQUARTILE\"] = \"firstQuartile\";\r\n    TRACKINGEVENT_TYPE[\"THIRDQUARTILE\"] = \"thirdQuartile\";\r\n    TRACKINGEVENT_TYPE[\"COMPLETE\"] = \"complete\";\r\n    TRACKINGEVENT_TYPE[\"MUTE\"] = \"mute\";\r\n    TRACKINGEVENT_TYPE[\"UNMUTE\"] = \"unmute\";\r\n    TRACKINGEVENT_TYPE[\"PAUSE\"] = \"pause\";\r\n    TRACKINGEVENT_TYPE[\"REWIND\"] = \"rewind\";\r\n    TRACKINGEVENT_TYPE[\"RESUME\"] = \"resume\";\r\n    TRACKINGEVENT_TYPE[\"FULLSCREEN\"] = \"fullscreen\";\r\n    TRACKINGEVENT_TYPE[\"EXPAND\"] = \"expand\";\r\n    TRACKINGEVENT_TYPE[\"COLLAPSE\"] = \"collapse\";\r\n    TRACKINGEVENT_TYPE[\"ACCEPTINVITATION\"] = \"acceptInvitation\";\r\n    TRACKINGEVENT_TYPE[\"CLOSE\"] = \"close\";\r\n})(TRACKINGEVENT_TYPE = exports.TRACKINGEVENT_TYPE || (exports.TRACKINGEVENT_TYPE = {}));\r\n;\r\n/**\r\n* @class VideoClicks\r\n* @ignore\r\n*/\r\nvar VideoClicks = /** @class */ (function () {\r\n    function VideoClicks() {\r\n        this.clickThrough = ''; // [Optional] URI to open as destination page when user clicks on the video\r\n        this.clickTracking = ''; // [Optional] URI to request for tracking purposes when user clicks on the video\r\n        this.customClick = ''; // [Optional] URI to request on custom events such as hotspotted video\r\n    }\r\n    return VideoClicks;\r\n}());\r\nexports.VideoClicks = VideoClicks;\r\n/**\r\n* @class MediaFile\r\n* @ignore\r\n*/\r\nvar MediaFile = /** @class */ (function () {\r\n    function MediaFile() {\r\n        this.id = ''; // [Optional] Identifier\r\n        this.delivery = ''; // [Required] Method of delivery of ad ('streaming' or 'progressive')\r\n        this.type = ''; // [Required] MIME type\r\n        this.bitrate = 0; // [Optional] Bitrate of encoded video in Kbps\r\n        this.width = 0; // [Required] Pixel dimensions of video\r\n        this.height = 0; // [Required] Pixel dimensions of video\r\n        this.scalable = true; // [Optional] Whether it is acceptable to scale the image.\r\n        this.maintainAspectRatio = true; // [Optional] Whether the ad must have its aspect ratio maintained when scaled\r\n        this.apiFramework = ''; // [Optional] Defines the method to use for communication if the MediaFile is interactive.\r\n        this.uri = '';\r\n    }\r\n    return MediaFile;\r\n}());\r\nexports.MediaFile = MediaFile;\r\n// MediaFile delivery types\r\nvar MEIAFILE_DELIVERY;\r\n(function (MEIAFILE_DELIVERY) {\r\n    MEIAFILE_DELIVERY[\"STREAMING\"] = \"streaming\";\r\n    MEIAFILE_DELIVERY[\"PROGRESSIVE\"] = \"progressive \";\r\n})(MEIAFILE_DELIVERY = exports.MEIAFILE_DELIVERY || (exports.MEIAFILE_DELIVERY = {}));\r\n;\r\n/**\r\n* @class StaticResource\r\n* @ignore\r\n*/\r\nvar StaticResource = /** @class */ (function () {\r\n    function StaticResource() {\r\n        this.uRI = ''; // optional : URI to a static file, such as an image or SWF file\r\n        this.creativeType = ''; // mime type of static resource\r\n    }\r\n    return StaticResource;\r\n}());\r\nexports.StaticResource = StaticResource;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AdPlayer_1 = __webpack_require__(18);\r\nvar Logger_1 = __webpack_require__(0);\r\nvar EventBus_1 = __webpack_require__(3);\r\nvar utils_1 = __webpack_require__(2);\r\nvar VastPlayerManager = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function VastPlayerManager(eventBus) {\r\n        this.vasts = [];\r\n        this.adPlayerContainer = null;\r\n        this.mainVideo = null;\r\n        this.vastIndex = -1;\r\n        this.adIndex = -1;\r\n        this.adPlayer = null;\r\n        this.logger = Logger_1.Logger.getInstance();\r\n        this.eventBus = eventBus;\r\n        this.onAdEndListener = this.onAdEnd.bind(this);\r\n    }\r\n    /**\r\n     * Initializes the VastPlayerManager.\r\n     * @method init\r\n     * @access public\r\n     * @memberof VastPlayerManager#\r\n     * @param {Array} vasts - the array of Vast components to play\r\n     * @param {Array} adPlayerContainer - the HTML DOM container for ads player components\r\n     */\r\n    VastPlayerManager.prototype.init = function (vasts, adPlayerContainer, mainVideo) {\r\n        this.vasts = vasts;\r\n        this.adPlayerContainer = adPlayerContainer;\r\n        this.mainVideo = mainVideo;\r\n    };\r\n    VastPlayerManager.prototype.start = function () {\r\n        if (!this.vasts || this.vasts.length === 0) {\r\n            return;\r\n        }\r\n        // Notify a trigger is starting to play\r\n        this.eventBus.dispatchEvent(EventBus_1.AdEvents.TRIGGER_START);\r\n        this.playVast(0);\r\n    };\r\n    VastPlayerManager.prototype.play = function () {\r\n        this.resumeAd();\r\n    };\r\n    VastPlayerManager.prototype.pause = function () {\r\n        this.pauseAd();\r\n    };\r\n    VastPlayerManager.prototype.stop = function () {\r\n        this.stopAd();\r\n    };\r\n    VastPlayerManager.prototype.getVastsDuration = function () {\r\n        var duration = 0;\r\n        // Get all VASTs duration\r\n        for (var i = 0; i < this.vasts.length; i++) {\r\n            var vast_1 = this.vasts[i];\r\n            // Get all Ads duration\r\n            for (var j = 0; j < vast_1.ads.length; j++) {\r\n                var ad = vast_1.ads[j];\r\n                // Get all linear Creatives duration\r\n                for (var k = 0; k < ad.inLine.creatives.length; k++) {\r\n                    var creative = ad.inLine.creatives[k];\r\n                    if (creative.linear) {\r\n                        duration += utils_1.Utils.parseTime(creative.linear.duration);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return duration;\r\n    };\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    VastPlayerManager.prototype.onAdEnd = function () {\r\n        this.logger.debug('Ad ended');\r\n        // Stop the current Ad\r\n        this.stopAd();\r\n        // Play next Ad\r\n        this.playNextAd();\r\n    };\r\n    VastPlayerManager.prototype.pauseAd = function () {\r\n        if (!this.adPlayer) {\r\n            return;\r\n        }\r\n        this.adPlayer.pause();\r\n    };\r\n    VastPlayerManager.prototype.resumeAd = function () {\r\n        if (!this.adPlayer) {\r\n            return;\r\n        }\r\n        this.adPlayer.play();\r\n    };\r\n    VastPlayerManager.prototype.stopAd = function () {\r\n        if (!this.adPlayer) {\r\n            return;\r\n        }\r\n        this.eventBus.removeEventListener('adEnd', this.onAdEndListener);\r\n        this.adPlayer.stop();\r\n        this.adPlayer = null;\r\n    };\r\n    VastPlayerManager.prototype.playAd = function (index) {\r\n        var vast = this.vasts[this.vastIndex], ad = vast.ads[index];\r\n        this.adIndex = index;\r\n        this.logger.debug('Play Ad - index = ' + this.adIndex);\r\n        this.eventBus.addEventListener(EventBus_1.AdEvents.AD_END, this.onAdEndListener);\r\n        this.adPlayer = new AdPlayer_1.AdPlayer(this.eventBus);\r\n        this.adPlayer.init(ad, this.adPlayerContainer, this.mainVideo, vast.baseUrl);\r\n        this.adPlayer.start();\r\n    };\r\n    VastPlayerManager.prototype.playNextAd = function () {\r\n        var vast = this.vasts[this.vastIndex];\r\n        this.adIndex++;\r\n        if (this.adIndex < vast.ads.length) {\r\n            this.playAd(this.adIndex);\r\n        }\r\n        else {\r\n            this.playNextVast();\r\n        }\r\n    };\r\n    VastPlayerManager.prototype.playVast = function (index) {\r\n        var vast = this.vasts[index];\r\n        if (vast.ads.length === 0) {\r\n            // Empty VAST\r\n            return;\r\n        }\r\n        this.vastIndex = index;\r\n        this.logger.debug('Play Vast - index = ' + this.vastIndex);\r\n        // Play first Ad\r\n        this.playAd(0);\r\n    };\r\n    VastPlayerManager.prototype.playNextVast = function () {\r\n        this.vastIndex++;\r\n        if (this.vastIndex < this.vasts.length) {\r\n            this.playVast(this.vastIndex);\r\n        }\r\n        else {\r\n            // Notify end of trigger\r\n            this.eventBus.dispatchEvent(EventBus_1.AdEvents.TRIGGER_END);\r\n        }\r\n    };\r\n    return VastPlayerManager;\r\n}());\r\nexports.VastPlayerManager = VastPlayerManager;\r\nexports.default = VastPlayerManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CreativePlayer_1 = __webpack_require__(19);\r\nvar Logger_1 = __webpack_require__(0);\r\nvar EventBus_1 = __webpack_require__(3);\r\nvar Events_1 = __webpack_require__(1);\r\nvar AdPlayer = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    /**\r\n     * Initializes the AdPlayer\r\n     * @method constructor\r\n     * @access public\r\n     * @memberof AdPlayer#\r\n     */\r\n    function AdPlayer(eventBus) {\r\n        this.ad = null;\r\n        this.adPlayerContainer = null;\r\n        this.mainVideo = null;\r\n        this.baseUrl = '';\r\n        this.creativeIndex = -1;\r\n        this.creativePlayer = null;\r\n        this.logger = Logger_1.Logger.getInstance();\r\n        this.eventBus = eventBus;\r\n        this.onCreativeEndListener = this.onCreativeEnd.bind(this);\r\n    }\r\n    /**\r\n     * Initializes the AdManager.\r\n     * @method init\r\n     * @access public\r\n     * @memberof VastPlayerManager#\r\n     * @param {Object} ad - the Ad to play\r\n     * @param {Array} adPlayerContainer - the HTML DOM container for ads player components\r\n     * @param {Object} mainVideo - the HTML5 video element used by the main media player\r\n     * @param {string} baseUrl - the base URL for media files\r\n     */\r\n    AdPlayer.prototype.init = function (ad, adPlayerContainer, mainVideo, baseUrl) {\r\n        this.ad = ad;\r\n        this.adPlayerContainer = adPlayerContainer;\r\n        this.mainVideo = mainVideo;\r\n        this.baseUrl = baseUrl;\r\n    };\r\n    AdPlayer.prototype.start = function () {\r\n        // Notify an Ad is starting to play\r\n        this.eventBus.dispatchEvent(EventBus_1.AdEvents.AD_START);\r\n        // Send Impressions tracking\r\n        this.sendImpressions(this.ad.inLine.impressions);\r\n        // Play first Creative\r\n        this.playCreative(0);\r\n    };\r\n    AdPlayer.prototype.play = function () {\r\n        this.resumeCreative();\r\n    };\r\n    AdPlayer.prototype.pause = function () {\r\n        this.pauseCreative();\r\n    };\r\n    AdPlayer.prototype.stop = function () {\r\n        this.stopCreative();\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    AdPlayer.prototype.sendImpressions = function (impressions) {\r\n        var impression;\r\n        if (impressions.length === 0) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < impressions.length; i++) {\r\n            impression = impressions[i];\r\n            if (impression.uri && impression.uri.length > 0) {\r\n                this.logger.debug('Send Impression, uri = ' + impression.uri);\r\n                var http = new XMLHttpRequest();\r\n                http.open('GET', impression.uri, true);\r\n                http.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n                http.send();\r\n            }\r\n        }\r\n    };\r\n    AdPlayer.prototype.onCreativeEnd = function () {\r\n        this.logger.debug('Creative ended');\r\n        // Stop the current creative media\r\n        this.stopCreative();\r\n        // Play next creative\r\n        this.playNextCreative();\r\n    };\r\n    AdPlayer.prototype.pauseCreative = function () {\r\n        if (!this.creativePlayer) {\r\n            return;\r\n        }\r\n        this.creativePlayer.pause();\r\n    };\r\n    AdPlayer.prototype.resumeCreative = function () {\r\n        if (!this.creativePlayer) {\r\n            return;\r\n        }\r\n        this.creativePlayer.play();\r\n    };\r\n    AdPlayer.prototype.stopCreative = function () {\r\n        if (!this.creativePlayer) {\r\n            return;\r\n        }\r\n        this.eventBus.removeEventListener('creativeEnd', this.onCreativeEndListener);\r\n        this.creativePlayer.stop();\r\n        this.creativePlayer = null;\r\n    };\r\n    AdPlayer.prototype.playCreative = function (index) {\r\n        var creative = this.ad.inLine.creatives[index], linear;\r\n        this.creativeIndex = index;\r\n        this.logger.debug('Play Creative - index = ' + this.creativeIndex);\r\n        // Play Linear element\r\n        linear = creative.linear;\r\n        if (linear) {\r\n            this.logger.debug('Play Linear Ad, duration = ' + linear.duration);\r\n            this.eventBus.addEventListener(Events_1.EventTypes.CREATIVE_END, this.onCreativeEndListener);\r\n            this.creativePlayer = new CreativePlayer_1.CreativePlayer(this.eventBus);\r\n            if (!this.creativePlayer.init(creative.linear, this.adPlayerContainer, this.mainVideo, this.baseUrl)) {\r\n                this.playNextCreative();\r\n            }\r\n        }\r\n        else {\r\n            this.playNextCreative();\r\n        }\r\n    };\r\n    AdPlayer.prototype.playNextCreative = function () {\r\n        this.creativeIndex++;\r\n        if (this.creativeIndex < this.ad.inLine.creatives.length) {\r\n            this.playCreative(this.creativeIndex);\r\n        }\r\n        else {\r\n            // Notify end of Ad\r\n            this.eventBus.dispatchEvent(EventBus_1.AdEvents.AD_END);\r\n        }\r\n    };\r\n    return AdPlayer;\r\n}());\r\nexports.AdPlayer = AdPlayer;\r\nexports.default = AdPlayer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TrackingEventsManager_1 = __webpack_require__(20);\r\nvar VideoPlayer_1 = __webpack_require__(21);\r\nvar ImagePlayer_1 = __webpack_require__(22);\r\nvar Config_1 = __webpack_require__(4);\r\nvar Logger_1 = __webpack_require__(0);\r\nvar Events_1 = __webpack_require__(1);\r\nvar utils_1 = __webpack_require__(2);\r\nvar CreativePlayer = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function CreativePlayer(eventBus) {\r\n        this.adPlayerContainer = null;\r\n        this.mediaPlayer = null;\r\n        this.trackingEventsManager = null;\r\n        this.mainVideo = null;\r\n        this.config = Config_1.Config.getInstance();\r\n        this.logger = Logger_1.Logger.getInstance();\r\n        this.eventBus = eventBus;\r\n        this.onMediaPlayListener = this.onMediaPlay.bind(this);\r\n        this.onMediaPauseListener = this.onMediaPause.bind(this);\r\n        this.onMediaErrorListener = this.onMediaError.bind(this);\r\n        this.onMediaTimeupdateListener = this.onMediaTimeupdate.bind(this);\r\n        this.onMediaEndedListener = this.onMediaEnded.bind(this);\r\n    }\r\n    /**\r\n     * Initializes the creative player.\r\n     * @method init\r\n     * @access public\r\n     * @memberof CreativePlayer#\r\n     * @param {Object} creative - the creative element to play\r\n     * @param {Object} adPlayerContainer - the HTML DOM container for ads player components\r\n     * @param {Object} mainVideo - the HTML5 video element used by the main media player\r\n     * @param {string} baseUrl - the base URL for media files\r\n     */\r\n    CreativePlayer.prototype.init = function (creative, adPlayerContainer, mainVideo, baseUrl) {\r\n        this.adPlayerContainer = adPlayerContainer;\r\n        this.mainVideo = mainVideo;\r\n        return this.load(creative, baseUrl);\r\n    };\r\n    CreativePlayer.prototype.play = function () {\r\n        this.play_();\r\n    };\r\n    CreativePlayer.prototype.pause = function () {\r\n        this.pause_();\r\n    };\r\n    CreativePlayer.prototype.stop = function () {\r\n        this.stop_();\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    CreativePlayer.prototype.onMediaPlay = function () {\r\n        this.logger.debug('Creative media play');\r\n        // Notify the creative has ended\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.PLAY);\r\n    };\r\n    CreativePlayer.prototype.onMediaPause = function () {\r\n        this.logger.debug('Creative media pause');\r\n        // Notify the creative has ended\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.PAUSE);\r\n    };\r\n    CreativePlayer.prototype.onMediaError = function () {\r\n        this.logger.debug('Creative media error');\r\n        // Notify the creative has ended\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.CREATIVE_END);\r\n    };\r\n    CreativePlayer.prototype.onMediaEnded = function () {\r\n        this.logger.debug('creative media ended');\r\n        // Notify the creative has ended\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.CREATIVE_END);\r\n    };\r\n    CreativePlayer.prototype.onMediaTimeupdate = function () {\r\n        //this.logger.debug('Media timeupdate: ' + this.mediaPlayer.getCurrentTime());\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.TIMEUPDATE, {\r\n            currentTime: this.mediaPlayer.getCurrentTime()\r\n        });\r\n    };\r\n    CreativePlayer.prototype.onMainVideoVolumeChange = function () {\r\n        if (!this.mediaPlayer) {\r\n            return;\r\n        }\r\n        this.mediaPlayer.setVolume(this.mainVideo.muted ? 0 : this.mainVideo.volume);\r\n    };\r\n    CreativePlayer.prototype.onAdClick = function (creative) {\r\n        // this = creative player\r\n        if (!creative.videoClicks) {\r\n            return;\r\n        }\r\n        this.logger.debug('Creative Click');\r\n        // ClickThrough : send an event for the application to open the web page\r\n        if (creative.videoClicks.clickThrough) {\r\n            this.logger.debug('Ad click, uri = ' + creative.videoClicks.clickThrough);\r\n            this.eventBus.dispatchEvent(Events_1.EventTypes.CLICK, {\r\n                uri: creative.videoClicks.clickThrough\r\n            });\r\n        }\r\n        // TODO\r\n        // ClickTracking\r\n        // if (this.videoClicks.clickTracking) {\r\n        // }\r\n    };\r\n    CreativePlayer.prototype.load = function (creative, baseUrl) {\r\n        var mediaFile, isVideo, isImage;\r\n        if (!creative) {\r\n            return false;\r\n        }\r\n        if (creative.mediaFiles.length === 0) {\r\n            return false;\r\n        }\r\n        mediaFile = creative.mediaFiles[0];\r\n        // Video or image media ?\r\n        isVideo = mediaFile.type.indexOf('video') !== -1;\r\n        isImage = mediaFile.type.indexOf('image') !== -1;\r\n        if (isVideo) {\r\n            this.mediaPlayer = new VideoPlayer_1.VideoPlayer();\r\n        }\r\n        else if (isImage) {\r\n            this.mediaPlayer = new ImagePlayer_1.ImagePlayer();\r\n        }\r\n        else {\r\n            // Unknown/unsupported media type\r\n            return false;\r\n        }\r\n        // Load the media files\r\n        this.logger.debug('Creative load');\r\n        if (!this.mediaPlayer.load(baseUrl, creative.mediaFiles)) {\r\n            this.mediaPlayer = null;\r\n            return false;\r\n        }\r\n        this.mediaPlayer.setDuration(utils_1.Utils.parseTime(creative.duration));\r\n        this.mediaPlayer.addEventListener('play', this.onMediaPlayListener);\r\n        this.mediaPlayer.addEventListener('pause', this.onMediaPauseListener);\r\n        this.mediaPlayer.addEventListener('error', this.onMediaErrorListener);\r\n        this.mediaPlayer.addEventListener('timeupdate', this.onMediaTimeupdateListener);\r\n        this.mediaPlayer.addEventListener('ended', this.onMediaEndedListener);\r\n        // Add tracking events\r\n        if (creative.trackingEvents) {\r\n            this.trackingEventsManager = new TrackingEventsManager_1.TrackingEventsManager();\r\n            this.trackingEventsManager.init(creative.trackingEvents, this.mediaPlayer);\r\n            this.trackingEventsManager.start();\r\n        }\r\n        // Notify a creative is starting to play\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.CREATIVE_START, {\r\n            mediaType: isVideo ? 'video' : 'audio',\r\n            duration: creative.duration,\r\n            clickThroughUrl: (creative.videoClicks && creative.videoClicks.clickThrough) ? creative.videoClicks.clickThrough : undefined\r\n        });\r\n        // Notify a media element has been created and appended into document\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.ADD_ELEMENT, {\r\n            element: this.mediaPlayer.getElement(),\r\n            type: this.mediaPlayer.getType()\r\n        });\r\n        // Add the media player DOM element\r\n        this.adPlayerContainer.appendChild(this.mediaPlayer.getElement());\r\n        // Listener for click\r\n        if (creative.videoClicks && this.config.handleClickThrough) {\r\n            if (creative.videoClicks.clickThrough) {\r\n                this.mediaPlayer.getElement().style.cursor = 'pointer';\r\n            }\r\n            this.mediaPlayer.getElement().addEventListener('click', this.onAdClick.bind(this, creative));\r\n        }\r\n        // Align media volume to main video volume, add 'volumechange' listener\r\n        this.onMainVideoVolumeChange();\r\n        this.mainVideo.addEventListener('volumechange', this.onMainVideoVolumeChange.bind(this));\r\n        // Start playing the media\r\n        this.play();\r\n        return true;\r\n    };\r\n    CreativePlayer.prototype.play_ = function () {\r\n        if (!this.mediaPlayer) {\r\n            return;\r\n        }\r\n        this.logger.debug('Creative play');\r\n        // Play the media player\r\n        this.mediaPlayer.play();\r\n    };\r\n    CreativePlayer.prototype.pause_ = function () {\r\n        if (!this.mediaPlayer) {\r\n            return;\r\n        }\r\n        this.logger.debug('Creative pause');\r\n        // Pause the media player\r\n        this.mediaPlayer.pause();\r\n    };\r\n    CreativePlayer.prototype.stop_ = function () {\r\n        if (!this.mediaPlayer) {\r\n            return;\r\n        }\r\n        this.logger.debug('Creative stop');\r\n        // Stop listening for 'volumechange' event\r\n        this.mainVideo.removeEventListener('volumechange', this.onMainVideoVolumeChange);\r\n        this.mainVideo = null;\r\n        // Stop the media player\r\n        this.mediaPlayer.removeEventListener('play', this.onMediaPlayListener);\r\n        this.mediaPlayer.removeEventListener('pause', this.onMediaPauseListener);\r\n        this.mediaPlayer.removeEventListener('error', this.onMediaErrorListener);\r\n        this.mediaPlayer.removeEventListener('timeupdate', this.onMediaTimeupdateListener);\r\n        this.mediaPlayer.removeEventListener('ended', this.onMediaEndedListener);\r\n        this.mediaPlayer.stop();\r\n        // Notify a media element has been removed from DOM\r\n        this.eventBus.dispatchEvent(Events_1.EventTypes.REMOVE_ELEMENT, {\r\n            element: this.mediaPlayer.getElement(),\r\n            type: this.mediaPlayer.getType()\r\n        });\r\n        // Remove the element from the DOM\r\n        this.adPlayerContainer.removeChild(this.mediaPlayer.getElement());\r\n        // Stop the TrackingEvents manager\r\n        if (this.trackingEventsManager) {\r\n            this.trackingEventsManager.stop();\r\n            this.trackingEventsManager = null;\r\n        }\r\n        // Reset the media player\r\n        this.mediaPlayer.reset();\r\n        this.mediaPlayer = null;\r\n    };\r\n    return CreativePlayer;\r\n}());\r\nexports.CreativePlayer = CreativePlayer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Logger_1 = __webpack_require__(0);\r\nvar TrackingEventsManager = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function TrackingEventsManager() {\r\n        this.trackingEvents = null;\r\n        this.adMediaPlayer = null;\r\n        this.currentTime = -1;\r\n        this.mute = false;\r\n        this.unmute = false;\r\n        this.debug = Logger_1.Logger.getInstance();\r\n        this.eventListeners = [];\r\n    }\r\n    /**\r\n     * Initializes the TrackingEventsManager.\r\n     * @method init\r\n     * @access public\r\n     * @memberof TrackingEventsManager#\r\n     * @param {Array} trackingEvents - the array of tracking events to manage\r\n     * @param {Object} adMediaPlayer - the ad media player\r\n     */\r\n    TrackingEventsManager.prototype.init = function (trackingEvents, adMediaPlayer) {\r\n        this.trackingEvents = trackingEvents;\r\n        this.adMediaPlayer = adMediaPlayer;\r\n        this.mute = (this.adMediaPlayer.getVolume() === 0);\r\n        this.unmute = (this.adMediaPlayer.getVolume() > 0);\r\n    };\r\n    TrackingEventsManager.prototype.start = function () {\r\n        if (this.trackingEvents.length === 0) {\r\n            return;\r\n        }\r\n        this.addPlayerEventListeners();\r\n    };\r\n    TrackingEventsManager.prototype.stop = function () {\r\n        this.removePlayerEventListeners();\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    TrackingEventsManager.prototype.postEvent = function (uri) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('GET', uri, true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send();\r\n    };\r\n    TrackingEventsManager.prototype.addEventListener = function (element, eventType, trackingEvent) {\r\n        var self = this, _listener = function ( /*event*/) {\r\n            if (this.completed) {\r\n                return;\r\n            }\r\n            if (this.uri === undefined || this.uri.length === 0) {\r\n                return;\r\n            }\r\n            if (this.condition && !this.condition()) {\r\n                return;\r\n            }\r\n            self.debug.log('Send tracking event ' + this.event + ', uri = ' + this.uri);\r\n            self.postEvent(this.uri);\r\n            if (this.oneShot) {\r\n                this.completed = true;\r\n            }\r\n        }, _eventListener = {\r\n            type: eventType,\r\n            element: element,\r\n            listener: _listener.bind(trackingEvent)\r\n        };\r\n        element.addEventListener(eventType, _eventListener.listener);\r\n        this.eventListeners.push(_eventListener);\r\n    };\r\n    TrackingEventsManager.prototype.addPlayerEventListeners = function () {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            var trackingEvent = this_1.trackingEvents[i];\r\n            trackingEvent.completed = false;\r\n            if (trackingEvent.uri && trackingEvent.uri.length > 0) {\r\n                switch (trackingEvent.event) {\r\n                    case 'creativeView':\r\n                        trackingEvent.oneShot = true;\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'loadeddata', trackingEvent);\r\n                        break;\r\n                    case 'start':\r\n                        trackingEvent.oneShot = true;\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'playing', trackingEvent);\r\n                        break;\r\n                    case 'pause':\r\n                        trackingEvent.oneShot = false;\r\n                        trackingEvent.condition = function () {\r\n                            // To ignore pause event that may be raised at end of stream\r\n                            return (_this.adMediaPlayer.isEnded() === false);\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'pause', trackingEvent);\r\n                        break;\r\n                    case 'resume':\r\n                        trackingEvent.oneShot = false;\r\n                        trackingEvent.condition = function () {\r\n                            return (_this.adMediaPlayer.getCurrentTime() > 0);\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'play', trackingEvent);\r\n                        break;\r\n                    case 'firstQuartile':\r\n                        trackingEvent.oneShot = true;\r\n                        trackingEvent.condition = function () {\r\n                            //_debug.log('Progress: ' + (this.adMediaPlayer.getCurrentTime() / _adMediaPlayer.getDuration()));\r\n                            return ((_this.adMediaPlayer.getCurrentTime() / _this.adMediaPlayer.getDuration()) >= 0.25);\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'timeupdate', trackingEvent);\r\n                        break;\r\n                    case 'midpoint':\r\n                        trackingEvent.oneShot = true;\r\n                        trackingEvent.condition = function () {\r\n                            //_debug.log('Progress: ' + (this.adMediaPlayer.getCurrentTime() / _adMediaPlayer.getDuration()));\r\n                            return ((_this.adMediaPlayer.getCurrentTime() / _this.adMediaPlayer.getDuration()) >= 0.50);\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'timeupdate', trackingEvent);\r\n                        break;\r\n                    case 'thirdQuartile':\r\n                        trackingEvent.oneShot = true;\r\n                        trackingEvent.condition = function () {\r\n                            //_debug.log('Progress: ' + (this.adMediaPlayer.getCurrentTime() / _adMediaPlayer.getDuration()));\r\n                            return ((_this.adMediaPlayer.getCurrentTime() / _this.adMediaPlayer.getDuration()) >= 0.75);\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'timeupdate', trackingEvent);\r\n                        break;\r\n                    case 'rewind':\r\n                        trackingEvent.oneShot = false;\r\n                        trackingEvent.condition = function () {\r\n                            var res = ((_this.adMediaPlayer.getCurrentTime() < _this.currentTime) && (_this.adMediaPlayer.isEnded() === false));\r\n                            _this.currentTime = _this.adMediaPlayer.getCurrentTime();\r\n                            return res;\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'timeupdate', trackingEvent);\r\n                        break;\r\n                    case 'complete':\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'ended', trackingEvent);\r\n                        break;\r\n                    case 'mute':\r\n                        trackingEvent.oneShot = false;\r\n                        trackingEvent.condition = function () {\r\n                            var res = !_this.mute && (_this.adMediaPlayer.getVolume() === 0);\r\n                            _this.mute = (_this.adMediaPlayer.getVolume() === 0);\r\n                            return res;\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'volumechange', trackingEvent);\r\n                        break;\r\n                    case 'unmute':\r\n                        trackingEvent.oneShot = false;\r\n                        trackingEvent.condition = function () {\r\n                            var res = !_this.unmute && (_this.adMediaPlayer.getVolume() > 0);\r\n                            _this.unmute = (_this.adMediaPlayer.getVolume() > 0);\r\n                            return res;\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'volumechange', trackingEvent);\r\n                        break;\r\n                    case 'fullscreen':\r\n                    case 'exitFullscreen':\r\n                        trackingEvent.oneShot = false;\r\n                        trackingEvent.condition = function (event) {\r\n                            if (event === void 0) { event = trackingEvent.event; }\r\n                            var state = (event === 'fullscreen');\r\n                            return (document['fullscreen'] === state || document['mozFullScreen'] === state || document['webkitIsFullScreen'] === state);\r\n                        };\r\n                        this_1.addEventListener(document, 'webkitfullscreenchange', trackingEvent);\r\n                        this_1.addEventListener(document, 'mozfullscreenchange', trackingEvent);\r\n                        this_1.addEventListener(document, 'MSFullscreenChange', trackingEvent);\r\n                        this_1.addEventListener(document, 'fullscreenChange', trackingEvent);\r\n                        break;\r\n                    case 'progress':\r\n                        trackingEvent.oneShot = true;\r\n                        trackingEvent.condition = function () {\r\n                            if (trackingEvent.offsetPercent) {\r\n                                //this.debug.log('progress:' + this.adMediaPlayer.getCurrentTime()+' vs offsetPercent = ' + trackingEvent.offsetPercent * this.adMediaPlayer.getDuration());\r\n                                return (_this.adMediaPlayer.getCurrentTime() >= trackingEvent.offsetPercent * _this.adMediaPlayer.getDuration());\r\n                            }\r\n                            else {\r\n                                //this.debug.log('progress:' + this.adMediaPlayer.getCurrentTime()+' vs offsetInSeconds ' + trackingEvent.offsetInSeconds);\r\n                                return (_this.adMediaPlayer.getCurrentTime() >= trackingEvent.offsetInSeconds);\r\n                            }\r\n                        };\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'timeupdate', trackingEvent);\r\n                        break;\r\n                    case 'acceptInvitationLinear':\r\n                        trackingEvent.oneShot = false;\r\n                        this_1.addEventListener(this_1.adMediaPlayer, 'click', trackingEvent);\r\n                        break;\r\n                    case 'closeLinear':\r\n                        trackingEvent.oneShot = false;\r\n                        this_1.addEventListener(window, 'beforeunload', trackingEvent);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.trackingEvents.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    TrackingEventsManager.prototype.removePlayerEventListeners = function () {\r\n        for (var i = 0; i < this.eventListeners.length; i++) {\r\n            this.eventListeners[i].element.removeEventListener(this.eventListeners[i].type, this.eventListeners[i].listener);\r\n        }\r\n        this.eventListeners = [];\r\n    };\r\n    return TrackingEventsManager;\r\n}());\r\nexports.TrackingEventsManager = TrackingEventsManager;\r\nexports.default = TrackingEventsManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Logger_1 = __webpack_require__(0);\r\nvar utils_1 = __webpack_require__(2);\r\nvar VideoPlayer = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function VideoPlayer() {\r\n        this.uri = '';\r\n        this.video = null;\r\n        this.logger = Logger_1.Logger.getInstance();\r\n    }\r\n    VideoPlayer.prototype.load = function (baseUrl, mediaFiles) {\r\n        // Get 'adsplayer-video' element if already declared in DOM\r\n        this.video = document.getElementById('adsplayer-video');\r\n        if (!this.video) {\r\n            // Create the video element\r\n            this.video = document.createElement('video');\r\n            this.video.autoplay = false;\r\n            this.video.id = 'adsplayer-video';\r\n        }\r\n        // Check if input format is supported\r\n        if (!this.isMediaSupported(mediaFiles[0].type)) {\r\n            return false;\r\n        }\r\n        // Sort the mediafiles in bitrate ascending order\r\n        mediaFiles.sort(function (a, b) {\r\n            if (a.bitrate && b.bitrate) {\r\n                return a.bitrate - b.bitrate;\r\n            }\r\n            return -1;\r\n        });\r\n        // Play the media file with lowest bitrate\r\n        this.uri = mediaFiles[0].uri;\r\n        // Add base URL\r\n        this.uri = utils_1.Utils.isAbsoluteURI(this.uri) ? this.uri : (baseUrl + this.uri);\r\n        this.logger.debug('Load video media, uri = ' + this.uri);\r\n        this.video.addEventListener('error', function (e) {\r\n            console.log(e);\r\n        });\r\n        this.video.src = this.uri;\r\n        return true;\r\n    };\r\n    VideoPlayer.prototype.getType = function () {\r\n        return 'video';\r\n    };\r\n    VideoPlayer.prototype.getElement = function () {\r\n        return this.video;\r\n    };\r\n    VideoPlayer.prototype.addEventListener = function (type, listener) {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video.addEventListener(type, listener);\r\n    };\r\n    VideoPlayer.prototype.removeEventListener = function (type, listener) {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video.removeEventListener(type, listener);\r\n    };\r\n    VideoPlayer.prototype.setDuration = function (duration) {\r\n        // duration is handled by the video element\r\n    };\r\n    VideoPlayer.prototype.getDuration = function () {\r\n        if (!this.video) {\r\n            return 0;\r\n        }\r\n        return this.video.duration;\r\n    };\r\n    VideoPlayer.prototype.getCurrentTime = function () {\r\n        if (!this.video) {\r\n            return 0;\r\n        }\r\n        return this.video.currentTime;\r\n    };\r\n    VideoPlayer.prototype.getVolume = function () {\r\n        if (!this.video) {\r\n            return 0;\r\n        }\r\n        return this.video.muted ? 0 : this.video.volume;\r\n    };\r\n    VideoPlayer.prototype.setVolume = function (volume) {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video.volume = volume;\r\n    };\r\n    VideoPlayer.prototype.play = function () {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video.play();\r\n    };\r\n    VideoPlayer.prototype.stop = function () {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video.pause();\r\n        this.video.removeAttribute('src');\r\n        this.video.load();\r\n    };\r\n    VideoPlayer.prototype.pause = function () {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video.pause();\r\n    };\r\n    VideoPlayer.prototype.reset = function () {\r\n        if (!this.video) {\r\n            return;\r\n        }\r\n        this.video = null;\r\n    };\r\n    VideoPlayer.prototype.isEnded = function () {\r\n        return this.video.ended;\r\n    };\r\n    // #endregion PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------    \r\n    VideoPlayer.prototype.isMediaSupported = function (mimeType) {\r\n        if (!this.video) {\r\n            throw 'isMediaSupported(): element not created';\r\n        }\r\n        if (!(this.video instanceof HTMLMediaElement)) {\r\n            throw 'isMediaSupported(): element must be of type HTMLMediaElement';\r\n        }\r\n        var canPlay = this.video.canPlayType(mimeType);\r\n        return (canPlay === 'probably' || canPlay === 'maybe');\r\n    };\r\n    return VideoPlayer;\r\n}());\r\nexports.VideoPlayer = VideoPlayer;\r\nexports.default = VideoPlayer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\n/*\r\n* The copyright in this software module is being made available under the BSD License, included\r\n* below. This software module may be subject to other third party and/or contributor rights,\r\n* including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2016, Orange\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification, are permitted\r\n* provided that the following conditions are met:\r\n* - Redistributions of source code must retain the above copyright notice, this list of conditions\r\n*   and the following disclaimer.\r\n* - Redistributions in binary form must reproduce the above copyright notice, this list of\r\n*   conditions and the following disclaimer in the documentation and/or other materials provided\r\n*   with the distribution.\r\n* - Neither the name of Orange nor the names of its contributors may be used to endorse or promote\r\n*   products derived from this software module without specific prior written permission.\r\n*\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER O\r\n* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Logger_1 = __webpack_require__(0);\r\nvar utils_1 = __webpack_require__(2);\r\nvar ImagePlayer = /** @class */ (function () {\r\n    // #endregion MEMBERS\r\n    // --------------------------------------------------\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function ImagePlayer() {\r\n        this.listeners = {};\r\n        this.uri = '';\r\n        this.image = null;\r\n        this.duration = 0;\r\n        this.currentTime = 0;\r\n        this.ended = false;\r\n        this.listeners = {};\r\n        this.timerInterval = null;\r\n        this.timerTime = -1;\r\n        this.events = ['play', 'pause', 'timeupdate', 'ended'];\r\n        this.logger = Logger_1.Logger.getInstance();\r\n    }\r\n    ImagePlayer.prototype.load = function (baseUrl, mediaFiles) {\r\n        var mediaFile = null;\r\n        // Load the first supported image format\r\n        // Support only jpeg, png and gif image formats\r\n        for (var i = 0; i < mediaFiles.length; i++) {\r\n            var type = mediaFiles[i].type;\r\n            if ((type === 'image/jpeg') || (type === 'image/jpg') || (type === 'image/png') || (type === 'image/gif')) {\r\n                mediaFile = mediaFiles[i];\r\n                break;\r\n            }\r\n        }\r\n        if (mediaFile === null) {\r\n            return false;\r\n        }\r\n        // Get adsplayer-image element if already declared in DOM\r\n        this.image = document.getElementById('adsplayer-image');\r\n        if (!this.image) {\r\n            // Create the image element\r\n            this.image = document.createElement('img');\r\n            this.image.id = 'adsplayer-image';\r\n        }\r\n        // Add base URL\r\n        this.uri = mediaFile.uri;\r\n        this.uri = utils_1.Utils.isAbsoluteURI(this.uri) ? this.uri : (baseUrl + this.uri);\r\n        this.logger.debug('Load image media, uri = ' + this.uri);\r\n        this.image.setAttribute('src', this.uri);\r\n        // Reset current time\r\n        this.currentTime = 0;\r\n        this.ended = false;\r\n        return true;\r\n    };\r\n    ImagePlayer.prototype.getType = function () {\r\n        return 'image';\r\n    };\r\n    ImagePlayer.prototype.getElement = function () {\r\n        return this.image;\r\n    };\r\n    ImagePlayer.prototype.addEventListener = function (type, listener) {\r\n        if (!this.image) {\r\n            return;\r\n        }\r\n        if (this.events.indexOf(type) !== -1) {\r\n            this.addEventListener_(type, listener);\r\n        }\r\n        else {\r\n            this.image.addEventListener(type, listener);\r\n        }\r\n    };\r\n    ImagePlayer.prototype.removeEventListener = function (type, listener) {\r\n        if (!this.image) {\r\n            return;\r\n        }\r\n        if (this.events.indexOf(type) !== -1) {\r\n            this.removeEventListener_(type, listener);\r\n        }\r\n        else {\r\n            this.image.removeEventListener(type, listener);\r\n        }\r\n    };\r\n    ImagePlayer.prototype.setDuration = function (duration) {\r\n        this.duration = duration;\r\n    };\r\n    ImagePlayer.prototype.getDuration = function () {\r\n        return this.duration;\r\n    };\r\n    ImagePlayer.prototype.getCurrentTime = function () {\r\n        return this.currentTime;\r\n    };\r\n    ImagePlayer.prototype.setVolume = function (volume) {\r\n        // NA\r\n    };\r\n    ImagePlayer.prototype.getVolume = function () {\r\n        return 0;\r\n    };\r\n    ImagePlayer.prototype.play = function () {\r\n        if (!this.image) {\r\n            return;\r\n        }\r\n        this.startTimer();\r\n    };\r\n    ImagePlayer.prototype.pause = function () {\r\n        if (!this.image) {\r\n            return;\r\n        }\r\n        this.stopTimer();\r\n    };\r\n    ImagePlayer.prototype.stop = function () {\r\n        if (!this.image) {\r\n            return;\r\n        }\r\n        this.stopTimer();\r\n    };\r\n    ImagePlayer.prototype.reset = function () {\r\n        if (!this.image) {\r\n            return;\r\n        }\r\n        this.image = null;\r\n        this.listeners = {};\r\n    };\r\n    ImagePlayer.prototype.isEnded = function () {\r\n        return this.ended;\r\n    };\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    ImagePlayer.prototype.getListeners = function (type) {\r\n        if (!(type in this.listeners)) {\r\n            this.listeners[type] = [];\r\n        }\r\n        return this.listeners[type];\r\n    };\r\n    ImagePlayer.prototype.addEventListener_ = function (type, listener) {\r\n        var listeners = this.getListeners(type), idx = listeners.indexOf(listener);\r\n        if (idx === -1) {\r\n            listeners.push(listener);\r\n        }\r\n    };\r\n    ImagePlayer.prototype.removeEventListener_ = function (type, listener) {\r\n        var listeners = this.getListeners(type), idx = listeners.indexOf(listener);\r\n        if (idx !== -1) {\r\n            listeners.splice(idx, 1);\r\n        }\r\n    };\r\n    ImagePlayer.prototype.notifyEvent = function (type) {\r\n        var listeners = this.getListeners(type);\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            listeners[i].call(this);\r\n        }\r\n    };\r\n    ImagePlayer.prototype.updateCurrentTime = function () {\r\n        var time = new Date().getTime();\r\n        this.currentTime += (time - this.timerTime) / 1000;\r\n        //this.logger.log('Image timeupdate, time = ' + this.currentTime);\r\n        this.notifyEvent('timeupdate');\r\n        if (this.currentTime >= this.duration) {\r\n            this.stopTimer();\r\n            this.ended = true;\r\n            this.notifyEvent('ended');\r\n        }\r\n        this.timerTime = time;\r\n    };\r\n    ImagePlayer.prototype.startTimer = function () {\r\n        if (this.timerInterval !== null) {\r\n            return;\r\n        }\r\n        this.notifyEvent('play');\r\n        this.timerTime = new Date().getTime();\r\n        this.timerInterval = setInterval(this.updateCurrentTime.bind(this), 200);\r\n    };\r\n    ImagePlayer.prototype.stopTimer = function () {\r\n        if (this.timerInterval === null) {\r\n            return;\r\n        }\r\n        this.notifyEvent('pause');\r\n        clearInterval(this.timerInterval);\r\n        this.timerInterval = null;\r\n    };\r\n    return ImagePlayer;\r\n}());\r\nexports.ImagePlayer = ImagePlayer;\r\nexports.default = ImagePlayer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n")}])}));